{
  "hash": "4d06af0cd115ee84b83e0191f9885571",
  "result": {
    "markdown": "---\ntitle: \"Engaging and Beautiful Data Visualizations with ggplot2\"\nsubtitle: \"<span style='font-size:2em;'>Fundamentals & Workflows</span><br><span style='font-weight:400;font-size:1.3em;'>— Exercise Solutions —</span>\"\nauthor: \"<a href='https://www.cedricscherer.com' style='color:#28a87d;font-weight:600;'>Cédric Scherer</a>&ensp;//&ensp;posit::conf&ensp;//&ensp;September 2023</span></span>\"\nformat:\n  revealjs:\n    theme: slides.scss\n    footer: '[Cédric Scherer](https://cedricscherer.com) // posit::conf(2023)'\n    transition: fade\n    progress: true\n    multiplex: false\n    preview-links: true\n    scrollable: false\n    hide-inactive-cursor: true\n    highlight-style: printing\n    chalkboard:\n      theme: whiteboard\n      boardmarker-width: 4\n      buttons: true\n    pause: true\n    mainfont: Cabinet Grotesk\neditor: source\nknitr:\n  opts_chunk:\n    dev: \"ragg_png\"\n    retina: 3\n    dpi: 200\nexecute:\n  freeze: auto\n  cache: false\n  echo: true\n  fig-width: 10\n  fig-height: 6.2\n  fig-align: center\n---\n\n\n# Exercise 1\n\n## Exercise 1\n\n::: question\n-   **Explore the TfL bike share data visually:**\n    -  Create a *time series* of counts per day and night.\n    -  Draw *box and whisker plots* of average temperatures per month.\n    -  Visualize bike counts per weather type and period as *bar chart*. \n-   **Combine the three plots with patchwork.**\n-   **Export the final graphic in a format of your choice.**\n:::\n\n\n## Preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(ggplot2)\n\n## data\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )\n\n## plot style\ntheme_set(theme_minimal(base_family = \"Asap SemiCondensed\", base_size = 18))\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(fill = NA, color = NA)\n)\n```\n:::\n\n\n\n## Time Series\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = date, y = count)) +\n  geom_line(aes(color = day_night))\n```\n:::\n\n\n\n## Time Series\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/timeseries-1-basic-1.png){width=2000}\n:::\n:::\n\n\n\n## Time Series\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng1 <- \n  ggplot(bikes, aes(x = date, y = count)) +\n  geom_line(aes(color = day_night)) +\n  scale_x_date(date_breaks = \"4 months\", date_labels = \"%m/'%y\") +\n  scale_y_continuous(labels = scales::label_comma()) +\n  scale_color_manual(values = c(day = \"#FFA200\", night = \"#757BC7\")) +\n  labs(x = NULL, y = \"Rented bikes\", color = NULL)\n\ng1\n```\n:::\n\n\n## Time Series\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/timeseries-2-polished-1.png){width=2000}\n:::\n:::\n\n\n\n## Box and Whisker Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = month, y = temp)) +\n  geom_boxplot()\n```\n:::\n\n\n\n## Box and Whisker Plots\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/boxplot-1-basic-1.png){width=2000}\n:::\n:::\n\n\n\n## Box and Whisker Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = forcats::fct_reorder(month, -temp), y = temp)) +\n  geom_boxplot()\n```\n:::\n\n\n\n## Box and Whisker Plots\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/boxplot-2-reordered-1.png){width=2000}\n:::\n:::\n\n\n\n## Box and Whisker Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- \n  ggplot(bikes, aes(x = lubridate::month(date, label = TRUE), y = temp)) +\n  geom_boxplot() +\n  scale_y_continuous(labels = scales::label_number(suffix = \"°C\")) +\n  labs(x = NULL, y = \"Temperature\")\n\ng2\n```\n:::\n\n\n\n## Box and Whisker Plots\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/boxplot-3-polished-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  geom_col()\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-1-geom-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(geom = \"col\")\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-2-stat-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(geom = \"col\", fun = \"sum\", position = \"stack\")\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-3-stat-fixed-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbikes |>\n  dplyr::group_by(weather_type, day_night) |>\n  dplyr::summarize(count = sum(count)) |>\n  ggplot(aes(x = weather_type, y = count, fill = day_night)) + \n  geom_col()\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-data-pre-proc-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = count, y = weather_type, fill = day_night)) + \n  stat_summary(geom = \"col\", fun = \"sum\", position = \"stack\")\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-4-horizontal-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(geom = \"col\", fun = \"sum\", position = \"dodge\")\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-5-dodged-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(\n    geom = \"col\", fun = \"sum\", \n    width = .7,\n    position = position_dodge(\n      width = .8, preserve = \"single\"\n    )\n  )\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-6-position-1-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(\n    geom = \"col\", fun = \"sum\", \n    width = .7,\n    position = position_dodge2(\n      padding = .2, preserve = \"single\"\n    )\n  )\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-7-position-2-1.png){width=2000}\n:::\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng3 <- ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(\n    geom = \"col\", fun = \"sum\", \n    width = .7,\n    position = position_dodge2(\n      padding = .2, preserve = \"single\"\n    )\n  ) +\n  scale_y_continuous(labels = scales::label_comma(scale = 1/10^6, suffix = \"M\")) +\n  scale_fill_manual(\n    values = c(day = \"#FFA200\", night = \"#757bc7\")\n  ) +\n  labs(x = NULL, y = \"Rented bikes\", fill = NULL) +\n  theme(\n    panel.grid.major.x = element_blank()\n  )\n\ng3\n```\n:::\n\n\n\n## Bar Chart\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/barchart-8-polished-1.png){width=2000}\n:::\n:::\n\n\n\n## Combine Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\ng2 + (g1 / g3) + plot_layout(guides = \"collect\", widths = c(.7, 1))\n```\n\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/combined-graphic-a-1.png){width=3000}\n:::\n:::\n\n\n\n## Combine Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n(g2 + g1) / g3 + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/combined-graphic-b-1.png){width=3000}\n:::\n:::\n\n\n\n## Combine Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n(g2 + g1 + plot_layout(widths = c(.7, 1))) / g3 + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](01-fundamentals-solution_files/figure-revealjs/combined-graphic-c-1.png){width=3000}\n:::\n:::\n\n\n\n## Save Multipanel Plot\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"bikes-panel.png\", width = 14, height = 9, dpi = 600, bg = \"white\")\n```\n:::\n\n\n\n--------------------------------------------------------------------------------\n\n![The final PNG graphic.](bikes-panel.png)\n\n\n# Exercise 2\n\n\n## Exercise 2\n\n::: question\n-   **Discuss / investigate with your neighbor:**\n    -  What are the differences between `geom_line()` and `geom_path()`?\n    -  Why can you use `geom_smooth()` and `stat_smooth()` interchangeably?\n    -  What are the three ways to *remove a legend* from a ggplot?\n    -  Which is your favorite theme? \n    -  What is your favorite ggplot2 extension package?\n:::\n",
    "supporting": [
      "01-fundamentals-solution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}