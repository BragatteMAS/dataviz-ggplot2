[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "A posit::conf(2023) Workshop by C√©dric Scherer\nüìÜ ‚ÄÇSeptember 18, 2023\n‚è∞ ‚ÄÇ09:00‚Äì17:00\nüè® ‚ÄÇTBA\n‚úçÔ∏è ‚ÄÇposit.co/conf"
  },
  {
    "objectID": "index.html#is-this-course-for-me",
    "href": "index.html#is-this-course-for-me",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Is this course for me?",
    "text": "Is this course for me?\nThis course will be appropriate for you if you:\n\nalready know how to create basic graphics with the ggplot2 package,\naim to improve the design of your ggplot outputs, and\nwant to learn how to create more complex charts that feature multiple layers, annotations, text styling, custom themes, and more."
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "License",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution 4.0 International License."
  },
  {
    "objectID": "materials/00-welcome.html#conversation-starters",
    "href": "materials/00-welcome.html#conversation-starters",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Conversation Starters",
    "text": "Conversation Starters\n\nWhat‚Äôs your name?\nWhere do you feel home?\nWhen did you use R for the first time?\nWhat‚Äôs your favorite animal / plant / color / typeface?\nWhere did you spend your summer?\nWhom would you like to meet during the posit::conf?\nWhich R package are you looking forward to try?\nWhat are things you want to learn about ggplot2?"
  },
  {
    "objectID": "materials/00-welcome.html#update-announcements",
    "href": "materials/00-welcome.html#update-announcements",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "UPDATE Announcements",
    "text": "UPDATE Announcements\n\nWiFi\n\nUsername:\nPassword: \n\nCourse Materials\n\nWebpage: posit-conf-2023.github.io/dataviz-ggplot2\nRstudio Cloud: posit.cloud/spaces/397253"
  },
  {
    "objectID": "materials/00-welcome.html#section-16",
    "href": "materials/00-welcome.html#section-16",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "posit-conf-2023.github.io/dataviz-ggplot2"
  },
  {
    "objectID": "materials/00-welcome.html#update-announcements-1",
    "href": "materials/00-welcome.html#update-announcements-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "UPDATE Announcements",
    "text": "UPDATE Announcements\n\n\ngender neutral bathrooms by the National Harbor rooms\nmeditation room is located at National Harbor 9, open 8am-5pm, Monday-Thursday\nthere is also has a dedicated room behind the reception\nlactation room is located at Potomac Dressing Room, open 8am-5pm, Monday-Thursday.\nparticipants with red lanyards wish to be not photographed, please note everyone‚Äôs lanyard colors before taking a photo\nthe Code of Conduct and COVID policies can be found at rstudio.com/conference/2022/2022-conf-code-of-conduct,please review them carefully"
  },
  {
    "objectID": "materials/00-welcome.html#communication-strategy",
    "href": "materials/00-welcome.html#communication-strategy",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Communication Strategy",
    "text": "Communication Strategy\n\n\n\nGreen sticky note ‚Äî I am done with the exercise\nPink sticky note ‚Äî I need help or support\nYou can ask questions / comment at any time during the course.\nPlease avoid questions during the breaks to give us a chance to recover and reflect.\nTeam up with your neighbors for exercises ‚Äî and lunch!\nWe will collect feedback twice during the day (more later)."
  },
  {
    "objectID": "materials/00-welcome.html#required-packages",
    "href": "materials/00-welcome.html#required-packages",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Required Packages",
    "text": "Required Packages\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"readr\")\ninstall.packages(\"forcats\")\ninstall.packages(\"stringr\")\ninstall.packages(\"lubridate\")\n\n\n\ninstall.packages(\"here\")\ninstall.packages(\"scales\")\ninstall.packages(\"ragg\")\ninstall.packages(\"systemfonts\")\ninstall.packages(\"rcartocolor\")\ninstall.packages(\"scico\")\ninstall.packages(\"prismatic\")\ninstall.packages(\"ggtext\")\ninstall.packages(\"ggforce\")\ninstall.packages(\"ggrepel\")"
  },
  {
    "objectID": "materials/00-welcome.html#optional-packages",
    "href": "materials/00-welcome.html#optional-packages",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Optional Packages",
    "text": "Optional Packages\n\ninstall.packages(\"viridis\")\ninstall.packages(\"RColorBrewer\")\ninstall.packages(\"MetBrewer\")\ninstall.packages(\"ggthemes\")\ninstall.packages(\"ggsci\")\ninstall.packages(\"camcorder\")\ninstall.packages(\"colorspace\")\nremotes::install_github(\"clauswilke/colorblindr\")"
  },
  {
    "objectID": "materials/01-fundamentals.html#section",
    "href": "materials/01-fundamentals.html#section",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "{ggplot2} package description\n\n\n\n{ggplot2} is a system for declaratively creating graphics,based on ‚ÄúThe Grammar of Graphics‚Äù (Wilkinson 2005).\n\nYou provide the data, tell {ggplot2} how to map variables to aesthetics,what graphical primitives to use, and it takes care of the details."
  },
  {
    "objectID": "materials/01-fundamentals.html#advantages-of-ggplot2",
    "href": "materials/01-fundamentals.html#advantages-of-ggplot2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Advantages of {ggplot2}",
    "text": "Advantages of {ggplot2}\n\n\nconsistent underlying ‚Äúgrammar of graphics‚Äù (Wilkinson 2005)\n\nvery flexible, layered plot specification\n\ntheme system for polishing plot appearance\n\nlots of additional functionality thanks to extensions\n\nactive and helpful community"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-components-of-a-ggplot",
    "href": "materials/01-fundamentals.html#the-components-of-a-ggplot",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Components of a ggplot",
    "text": "The Components of a ggplot\n\n\n\n\n\nComponent\n\n\nFunction\n\n\nExplanation\n\n\n\n\nData\n\n\nggplot(data)¬†¬†¬†¬†¬†¬†¬†¬†¬†\n\n\nThe raw data that you want to visualize.\n\n\n\n\nAesthetics¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†\n\n\naes()\n\n\nThe mapping between variables and visual properties\n\n\n\nGeometries\n\n\ngeom_*()\n\n\nThe geometric shapes representing the data."
  },
  {
    "objectID": "materials/01-fundamentals.html#the-components-of-a-ggplot-1",
    "href": "materials/01-fundamentals.html#the-components-of-a-ggplot-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Components of a ggplot",
    "text": "The Components of a ggplot\n\n\n\n\n\nComponent\n\n\nFunction\n\n\nExplanation\n\n\n\n\nData\n\n\nggplot(data)¬†¬†¬†¬†¬†¬†¬†¬†¬†\n\n\nThe raw data that you want to visualize.\n\n\n\n\nAesthetics¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†\n\n\naes()\n\n\nThe mapping between variables and visual properties.\n\n\n\nGeometries\n\n\ngeom_*()\n\n\nThe geometric shapes representing the data.\n\n\n\n\nStatistics\n\n\nstat_*()\n\n\nThe statistical transformations applied to the data.\n\n\n\n\nScales\n\n\nscale_*()\n\n\nThe representation of mapped aesthetic attributes.\n\n\n\n\nCoordinate System\n\n\ncoord_*()\n\n\nThe transformation to map data coordinates into the plot plane.\n\n\n\n\nFacets\n\n\nfacet_*()\n\n\nThe arrangement of the data into a grid of small multiples.\n\n\n\n\nVisual Themes\n\n\ntheme() | theme_*()\n\n\nThe overall visual defaults of non-data elements of the graphic."
  },
  {
    "objectID": "materials/01-fundamentals.html#the-data-set",
    "href": "materials/01-fundamentals.html#the-data-set",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Data Set",
    "text": "The Data Set\nBike sharing counts in London, UK, powered by TfL Open Data\n\n\ncovers the years 2015 and 2016\nincl.¬†weather data acquired from freemeteo.com\nprepared by Hristo Mavrodiev for Kaggle\nfurther modification by myself"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-data-set-1",
    "href": "materials/01-fundamentals.html#the-data-set-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Data Set",
    "text": "The Data Set\n\nlibrary(readr)\nlibrary(ggplot2)\n\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-data-set-2",
    "href": "materials/01-fundamentals.html#the-data-set-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Data Set",
    "text": "The Data Set\n\nbikes\n\n# A tibble: 1,454 √ó 14\n   date       day_night year  month season count is_workday is_weekend is_holiday  temp temp_feel humidity wind_speed weather_type    \n   <date>     <chr>     <fct> <fct> <fct>  <int> <lgl>      <lgl>      <lgl>      <dbl>     <dbl>    <dbl>      <dbl> <chr>           \n 1 2015-01-04 day       2015  1     3       6830 FALSE      TRUE       FALSE       2.17     -0.75     95.2      10.4  broken clouds   \n 2 2015-01-04 night     2015  1     3       2404 FALSE      TRUE       FALSE       2.79      2.04     93.4       4.58 clear           \n 3 2015-01-05 day       2015  1     3      14763 TRUE       FALSE      FALSE       8.96      7.71     81.1       8.67 broken clouds   \n 4 2015-01-05 night     2015  1     3       5609 TRUE       FALSE      FALSE       7.12      5.71     79.5       9.04 cloudy          \n 5 2015-01-06 day       2015  1     3      14501 TRUE       FALSE      FALSE       9         6.46     80.2      19.2  broken clouds   \n 6 2015-01-06 night     2015  1     3       6112 TRUE       FALSE      FALSE       6.71      4.21     77.6      12.8  clear           \n 7 2015-01-07 day       2015  1     3      16358 TRUE       FALSE      FALSE       8.17      5.08     75.2      21.2  scattered clouds\n 8 2015-01-07 night     2015  1     3       4706 TRUE       FALSE      FALSE       6.68      3.86     81.3      18.1  clear           \n 9 2015-01-08 day       2015  1     3       9971 TRUE       FALSE      FALSE       9.46      7.12     79.4      18.8  scattered clouds\n10 2015-01-08 night     2015  1     3       5630 TRUE       FALSE      FALSE      10.0       8.46     79.2      22.2  clear           \n# ‚Ñπ 1,444 more rows"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-data-set-3",
    "href": "materials/01-fundamentals.html#the-data-set-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Data Set",
    "text": "The Data Set\n\n\n\n\n\nVariable\nDescription\nClass\n\n\n\n\ndate\nDate encoded as `YYYY-MM-DD`\ndate\n\n\nday_night\n`day` (6:00am‚Äì5:59pm) or `night` (6:00pm‚Äì5:59am)\ncharacter\n\n\nyear\n`2015` or `2016`\nfactor\n\n\nmonth\n`1` (January) to `12` (December)\nfactor\n\n\nseason\n`0` (spring), `1` (summer), `2` (autumn), or `3` (winter)\nfactor\n\n\ncount\nSum of reported bikes rented\ninteger\n\n\nis_workday\n`TRUE` being Monday to Friday and no bank holiday\nlogical\n\n\nis_weekend\n`TRUE` being Saturday or Sunday\nlogical\n\n\nis_holiday\n`TRUE` being a bank holiday in the UK\nlogical\n\n\ntemp\nAverage air temperature (¬∞C)\ndouble\n\n\ntemp_feel\nAverage feels like temperature (¬∞C)\ndouble\n\n\nhumidity\nAverage air humidity (%)\ndouble\n\n\nwind_speed\nAverage wind speed (km/h)\ndouble\n\n\nweather_type\nMost common weather type\ncharacter"
  },
  {
    "objectID": "materials/01-fundamentals.html#a-default-ggplot",
    "href": "materials/01-fundamentals.html#a-default-ggplot",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "A Default ggplot",
    "text": "A Default ggplot\n\n# scatter plot of plot bikes$count versus bikes$temp_feel\nggplot(data = bikes) +              # initial call + data\n  aes(x = temp_feel, y = count) +   # aesthetics\n  geom_point()                      # geometric layer"
  },
  {
    "objectID": "materials/01-fundamentals.html#a-default-ggplot-1",
    "href": "materials/01-fundamentals.html#a-default-ggplot-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "A Default ggplot",
    "text": "A Default ggplot\n\n# scatter plot of plot bikes$count versus bikes$temp_feel\nggplot(bikes, aes(x = temp_feel, y = count)) +\n  geom_point()"
  },
  {
    "objectID": "materials/01-fundamentals.html#combine-layers",
    "href": "materials/01-fundamentals.html#combine-layers",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Combine Layers",
    "text": "Combine Layers\n\nggplot(bikes, aes(x = temp_feel, y = count)) +\n  geom_point() + \n  # add a GAM smoothing\n  stat_smooth() # also: geom_smooth()"
  },
  {
    "objectID": "materials/01-fundamentals.html#mapping-aesthetics",
    "href": "materials/01-fundamentals.html#mapping-aesthetics",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Mapping Aesthetics",
    "text": "Mapping Aesthetics\n\nggplot(bikes, aes(x = temp_feel, y = count, color = day_night)) + \n  geom_point() + \n  stat_smooth()"
  },
  {
    "objectID": "materials/01-fundamentals.html#mapping-aesthetics-1",
    "href": "materials/01-fundamentals.html#mapping-aesthetics-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Mapping Aesthetics",
    "text": "Mapping Aesthetics\n\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  # color mapping only applied to points\n  geom_point(aes(color = day_night)) + \n  # invisible grouping to create two trend lines\n  stat_smooth(aes(group = day_night))"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-properties",
    "href": "materials/01-fundamentals.html#setting-properties",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Properties",
    "text": "Setting Properties\n\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = day_night), \n    # setting larger points with 50% opacity\n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    aes(group = day_night), \n    # use linear fitting + draw black smoothing lines\n    method = \"lm\", color = \"black\"\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#split-into-facets",
    "href": "materials/01-fundamentals.html#split-into-facets",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Split into Facets",
    "text": "Split into Facets\n\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = day_night), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  # small multiples\n  facet_wrap(facets = vars(day_night)) # also: ~ day_night"
  },
  {
    "objectID": "materials/01-fundamentals.html#split-into-facets-1",
    "href": "materials/01-fundamentals.html#split-into-facets-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Split into Facets",
    "text": "Split into Facets\n\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = season), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  # small multiples\n  facet_grid(\n    rows = vars(day_night), cols = vars(year) # also: day_night ~ year\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#free-facets-axes",
    "href": "materials/01-fundamentals.html#free-facets-axes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Free Facets Axes",
    "text": "Free Facets Axes\n\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = season), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  facet_grid(\n    day_night ~ year, \n    # free y axis range\n    scales = \"free_y\", \n    # scale heights proportionally\n    space = \"free_y\"\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#store-ggplot",
    "href": "materials/01-fundamentals.html#store-ggplot",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Store ggplot",
    "text": "Store ggplot\n\ng1 <- \n  ggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = season), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  facet_grid(\n    day_night ~ year, \n    scales = \"free_y\", \n    space = \"free_y\"\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#change-the-axis-scaling",
    "href": "materials/01-fundamentals.html#change-the-axis-scaling",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Change the Axis Scaling",
    "text": "Change the Axis Scaling\n\ng1 +\n  # x axis\n  scale_x_continuous(\n    # add ¬∞C symbol\n    labels = function(x) paste0(x, \"¬∞C\"), \n    # use 5¬∞C spacing\n    breaks = -1:6*5  # also: seq(-5, 30, by = 5)\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#change-the-axis-scaling-1",
    "href": "materials/01-fundamentals.html#change-the-axis-scaling-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Change the Axis Scaling",
    "text": "Change the Axis Scaling\n\ng2 <- g1 +\n  # x axis\n  scale_x_continuous(\n    # add ¬∞C symbol\n    labels = function(x) paste0(x, \"¬∞C\"), \n    # use 5¬∞C spacing\n    breaks = -1:6*5  # also: seq(-5, 30, by = 5)\n  ) +\n  # y axis\n  scale_y_continuous(\n    # add a thousand separator\n    labels = scales::label_comma(), \n    # use consistent spacing across rows\n    breaks = 0:5*10000\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#use-a-custom-color-palette",
    "href": "materials/01-fundamentals.html#use-a-custom-color-palette",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use a Custom Color Palette",
    "text": "Use a Custom Color Palette\n\ng2 +\n  # use a custom color palette for season colors\n  scale_color_manual(\n    values = c(\"#6681FE\", \"#1EC98D\", \"#F7B01B\", \"#A26E7C\")\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#use-a-custom-color-palette-1",
    "href": "materials/01-fundamentals.html#use-a-custom-color-palette-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use a Custom Color Palette",
    "text": "Use a Custom Color Palette\n\n# use a named vector for explicit matching\ncolors <- c(\n  `0` = \"#1EC98D\",\n  `1` = \"#F7B01B\",\n  `2` = \"#A26E7C\",\n  `3` = \"#6681FE\"\n)\n\ng2 +\n  scale_color_manual(\n    values = colors\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#adjust-labels-and-titles",
    "href": "materials/01-fundamentals.html#adjust-labels-and-titles",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Adjust Labels and Titles",
    "text": "Adjust Labels and Titles\n\ng2 +\n  # overwrite legend keys\n  scale_color_manual(\n    values = colors,\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\")\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#adjust-labels-and-titles-1",
    "href": "materials/01-fundamentals.html#adjust-labels-and-titles-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Adjust Labels and Titles",
    "text": "Adjust Labels and Titles\n\ng3 <- g2 +\n  scale_color_manual(\n    values = colors,\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\")\n  ) +\n  labs(\n    # overwrite axis and legend titles\n    x = \"Average feels-like temperature\", y = NULL, color = NULL,\n    # add plot title and caption\n    title = \"Trends of Reported Bike Rents versus Feels-Like Temperature in London\",\n    caption = \"Data: TfL (Transport for London), Jan 2015‚ÄìDec 2016\"\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#apply-a-complete-theme",
    "href": "materials/01-fundamentals.html#apply-a-complete-theme",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply a Complete Theme",
    "text": "Apply a Complete Theme\n\ng3 +\n  # add theme with a custom font + larger element sizes\n  theme_light(\n    base_size = 15, base_family = \"Spline Sans\"\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#apply-a-complete-theme-1",
    "href": "materials/01-fundamentals.html#apply-a-complete-theme-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply a Complete Theme",
    "text": "Apply a Complete Theme\n\ng4 <- g3 +\n  theme_light(base_size = 15, base_family = \"Spline Sans\") +\n  # theme adjustments\n  theme(\n    plot.title.position = \"plot\", # left-align title \n    plot.caption.position = \"plot\", # right-align caption\n    legend.position = \"top\", # place legend above plot\n    plot.title = element_text(face = \"bold\", size = rel(1.4)), # larger, bold title\n    axis.text = element_text(family = \"Spline Sans Mono\"), # monospaced font for axes\n    axis.title.x = element_text( # left-aligned, grey x axis label\n      hjust = 0, color = \"grey20\", margin = margin(t = 12)\n    ),\n    legend.text = element_text(size = rel(1)), # larger legend labels\n    strip.text = element_text(face = \"bold\", size = rel(1.15)), # larger, bold facet labels\n    panel.grid.major.x = element_blank(), # no vertical major lines\n    panel.grid.minor = element_blank(), # no minor grid lines\n    panel.spacing.x = unit(20, \"pt\"), # increase white space between panels\n    panel.spacing.y = unit(10, \"pt\"), # increase white space between panels\n    plot.margin = margin(rep(15, 4)) # adjust white space around plot\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#adjust-legend",
    "href": "materials/01-fundamentals.html#adjust-legend",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Adjust Legend",
    "text": "Adjust Legend\n\ng4 +\n  # adjust symbol size in legend\n  guides(\n    color = guide_legend(override.aes = list(size = 4))\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#adjust-legend-1",
    "href": "materials/01-fundamentals.html#adjust-legend-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Adjust Legend",
    "text": "Adjust Legend\n\ng4 +\n  scale_color_manual(\n    values = colors,\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\"),\n    # adjust symbol size in legend size\n    guide = guide_legend(override.aes = list(size = 4))\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#full-code",
    "href": "materials/01-fundamentals.html#full-code",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Full Code",
    "text": "Full Code\n\n# create named color vector\ncolors <- c(\n  `0` = \"#1EC98D\",\n  `1` = \"#F7B01B\",\n  `2` = \"#A26E7C\",\n  `3` = \"#6681FE\"\n)\n\n# scatter plot of plot bikes$count versus bikes$temp_feel\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  # add points\n  geom_point(\n    # color mapping only applied to points\n    aes(color = season), \n    # setting larger points with 50% opacity\n    alpha = .5, size = 1.5\n  ) + \n  # add a smoothing\n  stat_smooth(  # also: geom_smooth()\n    # use linear fitting + draw black smoothing lines\n    method = \"lm\", color = \"black\"\n  ) +\n  # small multiples\n  facet_grid(\n    day_night ~ year,  # also: vars(day_night), vars(year)\n    # free y axis range\n    scales = \"free_y\", \n    # scale heights proportionally \n    space = \"free_y\"\n  ) +\n  # x axis\n  scale_x_continuous(\n    # add ¬∞C symbol\n    labels = function(x) paste0(x, \"¬∞C\"), \n    # use 5¬∞C spacing\n    breaks = -1:6*5  # also: seq(-5, 30, by = 5)\n  ) +\n  # y axis\n  scale_y_continuous(\n    # add a thousand separator\n    labels = scales::label_comma(), \n    # use consistent spacing across rows\n    breaks = 0:5*10000\n  ) +\n  # colors\n  scale_color_manual(\n    # use a custom color palette\n    values = colors,\n    # and overwrite legend keys\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\"),\n    # adjust symbol size in legend size\n    guide = guide_legend(override.aes = list(size = 4))\n  ) +\n  labs(\n    # overwrite axis and legend titles\n    x = \"Average feels-like temperature\", y = NULL, color = NULL,\n    # add plot title and caption\n    title = \"Trends of Reported Bike Rents versus Feels-Like Temperature in London\",\n    caption = \"Data: TfL (Transport for London), Jan 2015‚ÄìDec 2016\"\n  ) +\n  # add theme with a custom font + larger element sizes\n  theme_light(\n    base_size = 15, base_family = \"Spline Sans\"\n  ) +\n  # theme adjustments\n  theme(\n    plot.title.position = \"plot\", # left-align title \n    plot.caption.position = \"plot\", # right-align caption\n    legend.position = \"top\", # place legend above plot\n    plot.title = element_text(face = \"bold\", size = rel(1.4)), # larger, bold title\n    axis.text = element_text(family = \"Spline Sans Mono\"), # monospaced font for axes\n    axis.title.x = element_text( # left-aligned, grey x axis label\n      hjust = 0, color = \"grey20\", margin = margin(t = 12)\n    ),\n    legend.text = element_text(size = rel(1)), # larger legend labels\n    strip.text = element_text(face = \"bold\", size = rel(1.15)), # larger, bold facet labels\n    panel.grid.major.x = element_blank(), # no vertical major lines\n    panel.grid.minor = element_blank(), # no minor grid lines\n    panel.spacing.x = unit(20, \"pt\"), # increase white space between panels\n    panel.spacing.y = unit(10, \"pt\"), # increase white space between panels\n    plot.margin = margin(rep(15, 4)) # adjust white space around plot\n  )"
  },
  {
    "objectID": "materials/01-fundamentals.html#save-the-graphic",
    "href": "materials/01-fundamentals.html#save-the-graphic",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Save the Graphic",
    "text": "Save the Graphic\n\n\nggsave(filename = \"my_plot.png\", plot = g)\n\n\n\nggsave(\"my_plot.png\")\n\n\n\n\n\nggsave(\"my_plot.png\", width = 6, height = 5, dpi = 600)"
  },
  {
    "objectID": "materials/01-fundamentals.html#plot-resolution",
    "href": "materials/01-fundamentals.html#plot-resolution",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Plot Resolution",
    "text": "Plot Resolution"
  },
  {
    "objectID": "materials/01-fundamentals.html#plot-resolution-1",
    "href": "materials/01-fundamentals.html#plot-resolution-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Plot Resolution",
    "text": "Plot Resolution"
  },
  {
    "objectID": "materials/01-fundamentals.html#save-the-graphic-1",
    "href": "materials/01-fundamentals.html#save-the-graphic-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Save the Graphic",
    "text": "Save the Graphic\n\n\nggsave(filename = \"my_plot.png\", plot = g)\n\n\nggsave(\"my_plot.png\")\n\n\n\nggsave(\"my_plot.png\", width = 6, height = 5, dpi = 600)\n\n\n\nggsave(\"my_plot.png\", width = 6*2.54, height = 5*2.54, unit = \"cm\", dpi = 600)\n\n\n\n\n\nggsave(\"my_plot.png\", device = agg_png)\n\n\n\n\nggsave(\"my_plot.pdf\", device = cairo_pdf)"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-ragg-package",
    "href": "materials/01-fundamentals.html#the-ragg-package",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {ragg} Package",
    "text": "The {ragg} Package\nprovides drop-in replacements for the default raster graphic devices\n\n\nfaster\ndirect access to all system fonts\nadvanced text rendering\n\nincluding support for right-to-left text, emojis, and font fallback\n\nhigh quality anti-aliasing\nhigh quality rotated text\nsupports 16-bit output\nsystem independent rendering"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-ragg-package-1",
    "href": "materials/01-fundamentals.html#the-ragg-package-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {ragg} Package",
    "text": "The {ragg} Package\n\n\nSource: tidyverse.org/blog/2021/02/modern-text-features"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-ragg-package-2",
    "href": "materials/01-fundamentals.html#the-ragg-package-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {ragg} Package",
    "text": "The {ragg} Package\n\n\nSource: tidyverse.org/blog/2021/02/modern-text-features"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-ragg-package-3",
    "href": "materials/01-fundamentals.html#the-ragg-package-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {ragg} Package",
    "text": "The {ragg} Package\n\n\nSource: tidyverse.org/blog/2021/02/modern-text-features"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-ragg-package-4",
    "href": "materials/01-fundamentals.html#the-ragg-package-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {ragg} Package",
    "text": "The {ragg} Package\n\n\nSource: tidyverse.org/blog/2021/02/modern-text-features"
  },
  {
    "objectID": "materials/01-fundamentals.html#the-ragg-package-5",
    "href": "materials/01-fundamentals.html#the-ragg-package-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {ragg} Package",
    "text": "The {ragg} Package\n\n\nuse {ragg} when saving ggplots by passing agg device function: ggsave(device = agg_png)) (used by default if installed)\nuse {ragg} in the Rstudio Plots pane be setting the backend to AGG: \nuse {ragg} when knitting Rmarkdown files by setting dev=\"ragg_png\" in the code chunk options."
  },
  {
    "objectID": "materials/01-fundamentals.html#save-the-graphic-2",
    "href": "materials/01-fundamentals.html#save-the-graphic-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Save the Graphic",
    "text": "Save the Graphic\n\n\nggsave(filename = \"my_plot.png\", plot = g)\n\n\nggsave(\"my_plot.png\")\n\n\n\nggsave(\"my_plot.png\", width = 6, height = 5, dpi = 600)\n\n\nggsave(\"my_plot.png\", width = 6*2.54, height = 5*2.54, unit = \"cm\", dpi = 600)\n\n\n\nggsave(\"my_plot.png\", device = agg_png)\n\n\nggsave(\"my_plot.pdf\", device = cairo_pdf)\n\n\n\nggsave(\"my_plot.svg\")"
  },
  {
    "objectID": "materials/01-fundamentals.html#how-to-work-with-aspect-ratios",
    "href": "materials/01-fundamentals.html#how-to-work-with-aspect-ratios",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "How to Work with Aspect Ratios",
    "text": "How to Work with Aspect Ratios\n\n\ndon‚Äôt rely on the Rstudio viewer pane!\nonce you have a ‚Äúit‚Äôs getting close‚Äù prototype, settle on a plot size\nApproach 1: save the file and inspect it‚Äîgo back to your IDE‚Äîrepeat\n\ntedious and time-consuming‚Ä¶\n\nApproach 2: use a qmd or rmd with inline output and chunk settings\n\nset fig-width / fig.width and fig-height / fig.heightper chunk or globally"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-plot-sizes-in-quarto-and-rmarkdown",
    "href": "materials/01-fundamentals.html#setting-plot-sizes-in-quarto-and-rmarkdown",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Plot Sizes in Quarto and Rmarkdown",
    "text": "Setting Plot Sizes in Quarto and Rmarkdown"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-plot-sizes-in-quarto-and-rmarkdown-1",
    "href": "materials/01-fundamentals.html#setting-plot-sizes-in-quarto-and-rmarkdown-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Plot Sizes in Quarto and Rmarkdown",
    "text": "Setting Plot Sizes in Quarto and Rmarkdown"
  },
  {
    "objectID": "materials/01-fundamentals.html#how-to-work-with-aspect-ratios-1",
    "href": "materials/01-fundamentals.html#how-to-work-with-aspect-ratios-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "How to Work with Aspect Ratios",
    "text": "How to Work with Aspect Ratios\n\ndon‚Äôt rely on the Rstudio viewer pane!\nonce you have a ‚Äúit‚Äôs getting close‚Äù prototype, settle on a plot size\nApproach 1: save the file and inspect it‚Äîgo back to your IDE‚Äîrepeat\n\ntedious and time-consuming‚Ä¶\n\nApproach 2: use a qmd or rmd with inline output and chunk settings\n\nset fig-width / fig.width and fig-height / fig.heightper chunk or globally\n\nApproach 3: use our {camcorder} package\n\nsaves output from all ggplot() calls and displays it in the viewer pane"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder",
    "href": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Plot Sizes via {camcorder}",
    "text": "Setting Plot Sizes via {camcorder}"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder-1",
    "href": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Plot Sizes via {camcorder}",
    "text": "Setting Plot Sizes via {camcorder}"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder-2",
    "href": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Plot Sizes via {camcorder}",
    "text": "Setting Plot Sizes via {camcorder}\n\ncamcorder::gg_record(\n  dir = here::here(\"temp\"),  # path for plot files\n  device = \"png\",            # device to use\n  width = 10,                # figure width\n  height = 5,                # figure height\n  dpi = 600                  # plot resolution\n)\n\ng <- ggplot(bikes, aes(x = temp, y = count, color = day_night)) +\n  geom_point(alpha = .3, size = 2) +\n  scale_color_manual(values = c(day = \"#FFA200\", night = \"#757BC7\")) +\n  theme_minimal(base_size = 18, base_family = \"Asap SemiCondensed\") +\n  theme(panel.grid.minor = element_blank())\n\ng"
  },
  {
    "objectID": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder-3",
    "href": "materials/01-fundamentals.html#setting-plot-sizes-via-camcorder-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setting Plot Sizes via {camcorder}",
    "text": "Setting Plot Sizes via {camcorder}\n\ncamcorder::gg_record(\n  dir = here::here(\"temp\"),  # path for plot files\n  device = \"png\",            # device to use\n  width = 10,                # figure width\n  height = 5,                # figure height\n  dpi = 600                  # plot resolution\n)\n\ng <- ggplot(bikes, aes(x = temp, y = count, color = day_night)) +\n  geom_point(alpha = .3, size = 2) +\n  scale_color_manual(values = c(day = \"#FFA200\", night = \"#757BC7\")) +\n  theme_minimal(base_size = 18, base_family = \"Asap SemiCondensed\") +\n  theme(panel.grid.minor = element_blank())\n\ng\n\ncamcorder::gg_resize_film(width = 20) # update figure width\n\ng"
  },
  {
    "objectID": "materials/01-fundamentals.html#your-turn",
    "href": "materials/01-fundamentals.html#your-turn",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Your Turn",
    "text": "Your Turn\n\n\nExplore the TfL bike share data visually:\n\nCreate a time series of counts per day and night.\nDraw box and whisker plots of average temperatures per season.\nVisualize bike counts per weather type and period as bar chart.\n\nPolish the charts and export them in a format of your choice."
  },
  {
    "objectID": "materials/01-fundamentals.html#your-turn-1",
    "href": "materials/01-fundamentals.html#your-turn-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Your Turn",
    "text": "Your Turn\n\n\nExplore the TfL bike share data visually:\n\nCreate a time series of counts per day and night.\nDraw box and whisker plots of average temperatures per season.\nVisualize bike counts per weather type and period as bar chart.\n\nPolish the charts and export them in a format of your choice.\nDiscuss / investigate with your neighbor:\n\nWhat are the differences between geom_line() and geom_path()?\nWhy can you use geom_smooth() and stat_smooth() interchangeably?\nWhat are the three ways to remove a legend from a ggplot?\nWhich is your favorite theme?\nWhat is your favorite ggplot2 extension package?"
  },
  {
    "objectID": "materials/01-fundamentals.html#section-1",
    "href": "materials/01-fundamentals.html#section-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "C√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/02-text.html#setup",
    "href": "materials/02-text.html#setup",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setup",
    "text": "Setup\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nbikes <- readr::read_csv(\n  here::here(\"data\", \"london-bikes-custom.csv\"), \n  col_types = \"Dcfffilllddddc\"\n)\n\ntheme_set(theme_light(base_size = 14, base_family = \"Asap SemiCondensed\"))\n\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.title = element_text(face = \"bold\"),\n  #legend.position = \"top\",\n  plot.title.position = \"plot\"\n)"
  },
  {
    "objectID": "materials/02-text.html#update-your-turn",
    "href": "materials/02-text.html#update-your-turn",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "UPDATE Your Turn",
    "text": "UPDATE Your Turn\n\n\nLorem ipsum.\n\nDolor est."
  },
  {
    "objectID": "materials/02-text.html#section",
    "href": "materials/02-text.html#section",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "C√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/03-colors.html#setup",
    "href": "materials/03-colors.html#setup",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Setup",
    "text": "Setup\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nbikes <- readr::read_csv(\n  here::here(\"data\", \"london-bikes-custom.csv\"), \n  col_types = \"Dcfffilllddddc\"\n)\n\ntheme_set(theme_light(base_size = 14, base_family = \"Asap SemiCondensed\"))\n\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.title = element_text(face = \"bold\"),\n  #legend.position = \"top\",\n  plot.title.position = \"plot\"\n)"
  },
  {
    "objectID": "materials/03-colors.html#default-color-palettes-categorical",
    "href": "materials/03-colors.html#default-color-palettes-categorical",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Default Color Palettes: Categorical",
    "text": "Default Color Palettes: Categorical\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot()"
  },
  {
    "objectID": "materials/03-colors.html#default-color-palettes-sequential",
    "href": "materials/03-colors.html#default-color-palettes-sequential",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Default Color Palettes: Sequential",
    "text": "Default Color Palettes: Sequential\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7)"
  },
  {
    "objectID": "materials/03-colors.html#the-viridis-color-palettes",
    "href": "materials/03-colors.html#the-viridis-color-palettes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Viridis Color Palettes",
    "text": "The Viridis Color Palettes\n\nNu√±ez, Anderton & Renslow (2018), PloS One 13:e0199239. DOI: 10.1371/journal.pone.0199239"
  },
  {
    "objectID": "materials/03-colors.html#the-viridis-color-palettes-1",
    "href": "materials/03-colors.html#the-viridis-color-palettes-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Viridis Color Palettes",
    "text": "The Viridis Color Palettes\n\nPalette comparison of commonly used sequential color palettes in R from the {viridis} vignette"
  },
  {
    "objectID": "materials/03-colors.html#the-viridis-color-palettes-2",
    "href": "materials/03-colors.html#the-viridis-color-palettes-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The Viridis Color Palettes",
    "text": "The Viridis Color Palettes\n\nPalette comparison, as seen by a person with Deuteranopia, from the {viridis} vignette"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-viridis",
    "href": "materials/03-colors.html#pre-defined-color-palettes-viridis",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: Viridis",
    "text": "Pre-Defined Color Palettes: Viridis\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_viridis_d()"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-viridis-1",
    "href": "materials/03-colors.html#pre-defined-color-palettes-viridis-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: Viridis",
    "text": "Pre-Defined Color Palettes: Viridis\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_viridis_d(\n    begin = .3,\n    end = .9\n  )"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-viridis-2",
    "href": "materials/03-colors.html#pre-defined-color-palettes-viridis-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: Viridis",
    "text": "Pre-Defined Color Palettes: Viridis\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_viridis_c()"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-viridis-3",
    "href": "materials/03-colors.html#pre-defined-color-palettes-viridis-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: Viridis",
    "text": "Pre-Defined Color Palettes: Viridis\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_viridis_c(\n    option = \"cividis\"\n  )"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-viridis-4",
    "href": "materials/03-colors.html#pre-defined-color-palettes-viridis-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: Viridis",
    "text": "Pre-Defined Color Palettes: Viridis\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_viridis_c(\n    option = \"cividis\",\n    end = .95,\n    direction = -1\n  )"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\nThe ColorBrewer project: colorbrewer2.org"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-1",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_brewer()"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-2",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_distiller()"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-3",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\nRColorBrewer::display.brewer.all()"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-4",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\nRColorBrewer::display.brewer.all(colorblindFriendly = TRUE)"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-5",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_brewer(\n    palette = \"Set1\"\n  )"
  },
  {
    "objectID": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-6",
    "href": "materials/03-colors.html#pre-defined-color-palettes-colorbrewer-6",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Pre-Defined Color Palettes: ColorBrewer",
    "text": "Pre-Defined Color Palettes: ColorBrewer\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_distiller(\n    palette = \"YlOrRd\",\n    direction = 1\n  )"
  },
  {
    "objectID": "materials/03-colors.html#rcartocolor",
    "href": "materials/03-colors.html#rcartocolor",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{rcartocolor}",
    "text": "{rcartocolor}\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  rcartocolor::scale_fill_carto_d()"
  },
  {
    "objectID": "materials/03-colors.html#rcartocolor-1",
    "href": "materials/03-colors.html#rcartocolor-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{rcartocolor}",
    "text": "{rcartocolor}\n\nrcartocolor::display_carto_all()"
  },
  {
    "objectID": "materials/03-colors.html#rcartocolor-2",
    "href": "materials/03-colors.html#rcartocolor-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{rcartocolor}",
    "text": "{rcartocolor}\n\nrcartocolor::display_carto_all(colorblind_friendly = TRUE)"
  },
  {
    "objectID": "materials/03-colors.html#rcartocolor-3",
    "href": "materials/03-colors.html#rcartocolor-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{rcartocolor}",
    "text": "{rcartocolor}\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  rcartocolor::scale_fill_carto_d(\n    palette = \"Safe\"\n  )"
  },
  {
    "objectID": "materials/03-colors.html#scico",
    "href": "materials/03-colors.html#scico",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{scico}",
    "text": "{scico}\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scico::scale_color_scico()"
  },
  {
    "objectID": "materials/03-colors.html#scico-1",
    "href": "materials/03-colors.html#scico-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{scico}",
    "text": "{scico}\n\nscico::scico_palette_show()"
  },
  {
    "objectID": "materials/03-colors.html#scico-2",
    "href": "materials/03-colors.html#scico-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{scico}",
    "text": "{scico}\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scico::scale_color_scico(\n    palette = \"brocO\",\n    direction = -1\n  )"
  },
  {
    "objectID": "materials/03-colors.html#ggsci-and-ggthemes",
    "href": "materials/03-colors.html#ggsci-and-ggthemes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{ggsci} and {ggthemes}",
    "text": "{ggsci} and {ggthemes}\n\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  ggsci::scale_fill_npg()\n\n\n\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  ggthemes::scale_fill_gdocs()"
  },
  {
    "objectID": "materials/03-colors.html#metbrewer",
    "href": "materials/03-colors.html#metbrewer",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{MetBrewer}",
    "text": "{MetBrewer}\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  MetBrewer::scale_fill_met_d(\n    name = \"Klimt\"\n  )"
  },
  {
    "objectID": "materials/03-colors.html#metbrewer-1",
    "href": "materials/03-colors.html#metbrewer-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{MetBrewer}",
    "text": "{MetBrewer}\n\nMetBrewer::display_all()"
  },
  {
    "objectID": "materials/03-colors.html#metbrewer-2",
    "href": "materials/03-colors.html#metbrewer-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{MetBrewer}",
    "text": "{MetBrewer}\n\nMetBrewer::display_all(colorblind_only = TRUE)"
  },
  {
    "objectID": "materials/03-colors.html#metbrewer-3",
    "href": "materials/03-colors.html#metbrewer-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "{MetBrewer}",
    "text": "{MetBrewer}\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  MetBrewer::scale_color_met_c(\n    name = \"Hiroshige\" \n  )"
  },
  {
    "objectID": "materials/03-colors.html#evaluate-hcl-spectrum",
    "href": "materials/03-colors.html#evaluate-hcl-spectrum",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Evaluate HCL Spectrum",
    "text": "Evaluate HCL Spectrum\nMore on how to evaluate color palettes: HCLwizard and colorspace.\n\n\n\ncolorspace::specplot(\n  colorspace::diverging_hcl(\n    n = 100, palette = \"Blue-Red\"\n  )\n)\n\n\n\n\n\n\ncolorspace::specplot(\n  MetBrewer::met.brewer(\n     n = 100, name = \"Hiroshige\"\n  )\n)"
  },
  {
    "objectID": "materials/03-colors.html#evaluate-hcl-spectrum-1",
    "href": "materials/03-colors.html#evaluate-hcl-spectrum-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Evaluate HCL Spectrum",
    "text": "Evaluate HCL Spectrum\nMore on how to evaluate color palettes: HCLwizard and colorspace.\n\n\n\ncolorspace::specplot(\n  MetBrewer::met.brewer(\n     n = 100, name = \"Cassatt2\"\n  )\n)\n\n\n\n\n\n\ncolorspace::specplot(\n  MetBrewer::met.brewer(\n     n = 100, name = \"Veronese\"\n  )\n)"
  },
  {
    "objectID": "materials/03-colors.html#evaluate-hcl-spectrum-2",
    "href": "materials/03-colors.html#evaluate-hcl-spectrum-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Evaluate HCL Spectrum",
    "text": "Evaluate HCL Spectrum\nMore on how to evaluate color palettes: HCLwizard and colorspace.\n\n\n\ncolorspace::specplot(\n  viridis::viridis(\n    n = 100, direction = -1\n  )\n)\n\n\n\n\n\n\ncolorspace::specplot(\n  MetBrewer::met.brewer(\n     n = 100, name = \"Hokusai3\"\n  )\n)"
  },
  {
    "objectID": "materials/03-colors.html#evaluate-hcl-spectrum-3",
    "href": "materials/03-colors.html#evaluate-hcl-spectrum-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Evaluate HCL Spectrum",
    "text": "Evaluate HCL Spectrum\nMore on how to evaluate color palettes: HCLwizard and colorspace.\n\n\n\ncolorspace::specplot(\n  rainbow(\n    n = 100\n  )\n)\n\n\n\n\n\n\ncolorspace::specplot(\n  viridis::turbo(\n     n = 100, direction = -1\n  )\n)"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes",
    "href": "materials/03-colors.html#customize-existing-palettes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  rcartocolor::scale_fill_carto_d(\n    palette = \"Vivid\" \n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-1",
    "href": "materials/03-colors.html#customize-existing-palettes-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_manual(\n    values = rcartocolor::carto_pal(\n      name = \"Vivid\", n = 4\n    )\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-2",
    "href": "materials/03-colors.html#customize-existing-palettes-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_manual(\n    values = rcartocolor::carto_pal(\n      name = \"Vivid\", n = 5\n    )[1:4]\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-3",
    "href": "materials/03-colors.html#customize-existing-palettes-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_manual(\n    values = rcartocolor::carto_pal(\n      name = \"Vivid\", n = 7\n    )[c(2, 6, 1, 3)]\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-4",
    "href": "materials/03-colors.html#customize-existing-palettes-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\ncarto_custom <- \n  rcartocolor::carto_pal(\n    name = \"Vivid\", n = 7\n  )[c(2, 6, 1, 3)]\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_manual(\n    values = carto_custom\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-5",
    "href": "materials/03-colors.html#customize-existing-palettes-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nlibrary(prismatic)\n\ncarto_light <- clr_lighten(\n  carto_custom, .7\n)\n\nggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_manual(\n    values = carto_light\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-6",
    "href": "materials/03-colors.html#customize-existing-palettes-6",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count)) +\n  geom_boxplot(\n    aes(fill = season,\n        fill = after_scale(\n          clr_lighten(fill, .7)\n    ))\n  ) +\n  scale_fill_manual(\n    values = carto_custom\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-7",
    "href": "materials/03-colors.html#customize-existing-palettes-7",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count)) +\n  geom_boxplot(\n    aes(fill = stage(\n      season, \n      after_scale = clr_lighten(fill, .7)\n    ))\n  ) +\n  scale_fill_manual(\n    values = carto_custom\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-8",
    "href": "materials/03-colors.html#customize-existing-palettes-8",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes, \n       aes(x = day_night, y = count)) +\n  geom_boxplot(\n    aes(color = season,\n        fill = after_scale(\n          clr_lighten(color, .7)\n    ))\n  ) +\n  scale_color_manual(\n    values = carto_custom\n  )"
  },
  {
    "objectID": "materials/03-colors.html#customize-existing-palettes-9",
    "href": "materials/03-colors.html#customize-existing-palettes-9",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Customize Existing Palettes",
    "text": "Customize Existing Palettes\n\n\nggplot(bikes,\n       aes(x = day_night, y = count)) +\n  geom_boxplot(\n    aes(color = season,\n        fill = after_scale(\n          clr_lighten(color, .7)\n    )),\n    outlier.shape = NA\n  ) +\n  geom_jitter(\n    aes(color = season,\n        color = after_scale(\n          clr_darken(color, .4)\n    )), \n    position = position_jitterdodge(\n      dodge.width = .75, \n      jitter.width = .2\n    ),\n    alpha = .3, size = .6\n  ) +\n  scale_color_manual(\n    values = carto_custom\n  ) +\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "materials/03-colors.html#create-sequential-palettes",
    "href": "materials/03-colors.html#create-sequential-palettes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Sequential Palettes",
    "text": "Create Sequential Palettes\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_gradient(\n    low = \"#1D785A\",\n    high = \"#FFCE52\"\n  )"
  },
  {
    "objectID": "materials/03-colors.html#create-diverging-palettes",
    "href": "materials/03-colors.html#create-diverging-palettes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Diverging Palettes",
    "text": "Create Diverging Palettes\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_gradient2(\n    low = \"#663399\",\n    high = \"#993334\",\n    mid = \"grey85\"\n  )"
  },
  {
    "objectID": "materials/03-colors.html#create-diverging-palettes-1",
    "href": "materials/03-colors.html#create-diverging-palettes-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Diverging Palettes",
    "text": "Create Diverging Palettes\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_gradient2(\n    low = \"#663399\",\n    high = \"#993334\",\n    mid = \"grey85\",\n    midpoint = mean(bikes$humidity)    \n  )"
  },
  {
    "objectID": "materials/03-colors.html#create-diverging-palettes-2",
    "href": "materials/03-colors.html#create-diverging-palettes-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Diverging Palettes",
    "text": "Create Diverging Palettes\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = temp)) +\n  geom_point(alpha = .7) +\n  scale_color_gradient2(\n    low = \"#663399\",\n    high = \"#993334\",\n    mid = \"grey85\",\n    midpoint = 10,\n    limits = c(-10, 30)\n  )"
  },
  {
    "objectID": "materials/03-colors.html#evaluate-hcl-spectrum-4",
    "href": "materials/03-colors.html#evaluate-hcl-spectrum-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Evaluate HCL Spectrum",
    "text": "Evaluate HCL Spectrum\nMore on how to evaluate color palettes: HCLwizard and colorspace.\n\n\n\ncolorspace::specplot(\n  colorRampPalette(\n    c(\"#1D785A\", \"#FFCE52\")\n  )(100)\n)\n\n\n\n\n\ncolorspace::specplot(\n  colorRampPalette(\n    c(\"#663399\", \"grey85\", \"#993334\")\n  )(100)\n)"
  },
  {
    "objectID": "materials/03-colors.html#create-any-palette",
    "href": "materials/03-colors.html#create-any-palette",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Any Palette",
    "text": "Create Any Palette\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_gradientn(\n    colors = carto_custom  \n  )"
  },
  {
    "objectID": "materials/03-colors.html#create-any-palette-1",
    "href": "materials/03-colors.html#create-any-palette-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Any Palette",
    "text": "Create Any Palette\n\npal_c <- \n  colorRampPalette(\n    c(\"#663399\", \"grey85\", \"#993334\")\n  )(5)\n\nplot(prismatic::color(pal_c))"
  },
  {
    "objectID": "materials/03-colors.html#create-any-palette-2",
    "href": "materials/03-colors.html#create-any-palette-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create Any Palette",
    "text": "Create Any Palette\n\n\nggplot(filter(bikes, is_weekend == TRUE), \n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_gradientn(\n    colors = pal_c,\n    values = c(0, .05, .2, .8, .95, 1)\n  )"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales",
    "href": "materials/03-colors.html#build-custom-color-scales",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales",
    "text": "Build Custom Color Scales\n\ndubois_colors <- function(...) {\n  \n  # define colors\n  dubois_cols <- c(\n    `black`    = \"#000000\",\n    `purple`   = \"#582f6c\",\n    `violet`   = \"#94679C\",\n    `pink`     = \"#ef849f\",\n    `softred`  = \"#f4b7a7\",\n    `iceblue`  = \"#bccbf3\",\n    `palegrey` = \"#e4e4e4\"\n  )\n\n  # if no colors are specified, return all\n  cols <- c(...)\n  if (is.null(cols))  return (dubois_cols)\n\n  # if colors are specified, return those\n  dubois_cols[cols]\n}"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-1",
    "href": "materials/03-colors.html#build-custom-color-scales-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales",
    "text": "Build Custom Color Scales\n\nplot(color(dubois_colors()))"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-2",
    "href": "materials/03-colors.html#build-custom-color-scales-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales",
    "text": "Build Custom Color Scales\n\nplot(color(dubois_colors(\"black\", \"violet\", \"softred\", \"iceblue\", \"palegrey\")))"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-categorical",
    "href": "materials/03-colors.html#build-custom-color-scales-categorical",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Categorical",
    "text": "Build Custom Color Scales: Categorical\n\ndubois_pal_d <- function(palette = \"default\", reverse = FALSE) {\n  \n  # nested function to return colors via `dubois_pal_d()(n)`\n  function(n) {\n    \n    # check if number of colors is sufficient\n    if(n > 5) stop('Palettes only contain 5 colors')\n  \n    # check arguments\n    if (!palette %in% c(\"default\", \"dark\", \"light\")) stop('palette should be \"default\", \"dark\" or \"light\".')\n    if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric')\n\n    # define palette styles\n    if (palette == \"default\") { pal <- dubois_colors(\"black\", \"violet\", \"softred\", \"iceblue\", \"palegrey\")[1:n] }\n    if (palette == \"dark\") { pal <- dubois_colors(1:5)[1:n] }\n    if (palette == \"light\") { pal <- dubois_colors(3:7)[1:n] }\n    \n    # return unnamed vector of color codes\n    pal <- unname(pal)\n\n    # check reverse argument\n    if (reverse) rev(pal) else pal\n  }\n}"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-categorical-1",
    "href": "materials/03-colors.html#build-custom-color-scales-categorical-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Categorical",
    "text": "Build Custom Color Scales: Categorical\n\nplot(color(dubois_pal_d()(5)))"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-categorical-2",
    "href": "materials/03-colors.html#build-custom-color-scales-categorical-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Categorical",
    "text": "Build Custom Color Scales: Categorical\n\nplot(color(dubois_pal_d(palette = \"dark\", reverse = TRUE)(5)))"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-categorical-3",
    "href": "materials/03-colors.html#build-custom-color-scales-categorical-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Categorical",
    "text": "Build Custom Color Scales: Categorical\n\nscale_color_dubois_d <- function(palette = \"default\", reverse = FALSE, ...) {\n  \n  # check arguments\n  if (!palette %in% c(\"default\", \"dark\", \"light\")) stop('palette should be \"default\", \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric')\n\n  # retrieve color set\n  pal <- dubois_pal_d(palette = palette, reverse = reverse)\n\n  # apply to discrete scale\n  ggplot2::discrete_scale(\"colour\", paste0(\"dubois_\", palette), palette = pal, ...)\n}"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-categorical-4",
    "href": "materials/03-colors.html#build-custom-color-scales-categorical-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Categorical",
    "text": "Build Custom Color Scales: Categorical\n\nscale_color_dubois_d <- function(palette = \"default\", reverse = FALSE, ...) {\n  \n  # check arguments\n  if (!palette %in% c(\"default\", \"dark\", \"light\")) stop('palette should be \"default\", \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric')\n\n  # retrieve color set\n  pal <- dubois_pal_d(palette = palette, reverse = reverse)\n\n  # apply to discrete scale\n  ggplot2::discrete_scale(\"colour\", paste0(\"dubois_\", palette), palette = pal, ...)\n}\n\nscale_fill_dubois_d <- function(palette = \"default\", reverse = FALSE, ...) {\n  \n  if (!palette %in% c(\"default\", \"dark\", \"light\")) stop('palette should be \"default\", \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric')\n\n  pal <- dubois_pal_d(palette = palette, reverse = reverse)\n\n  ggplot2::discrete_scale(\"fill\", paste0(\"dubois_\", palette), palette = pal, ...)\n}"
  },
  {
    "objectID": "materials/03-colors.html#use-your-custom-color-scales-categorical",
    "href": "materials/03-colors.html#use-your-custom-color-scales-categorical",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Your Custom Color Scales: Categorical",
    "text": "Use Your Custom Color Scales: Categorical\n\n\nggplot(bikes, \n       aes(y = weather_type, \n           fill = season)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_dubois_d(\n    reverse = TRUE,\n    name = NULL\n  ) +\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-sequential",
    "href": "materials/03-colors.html#build-custom-color-scales-sequential",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Sequential",
    "text": "Build Custom Color Scales: Sequential\n\ndubois_pal_c <- function(palette = \"dark\", reverse = FALSE, ...) {\n  \n  # check arguments\n  if (!palette %in% c(\"dark\", \"light\")) stop('palette should be \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric')\n  \n  # define palette styles\n  dubois_palettes <- list(\n    `dark`    = dubois_colors(\"black\", \"purple\", \"violet\", \"pink\"),\n    `light`   = dubois_colors(\"purple\", \"violet\", \"pink\", \"palegrey\")\n  )\n\n  # retrieve color set as unnamed vector\n  pal <- dubois_palettes[[palette]]\n  pal <- unname(pal)\n\n  # check reverse argument\n  if (reverse) pal <- rev(pal)\n\n  # create a color gradient with n colors\n  grDevices::colorRampPalette(pal, ...)\n}"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-sequential-1",
    "href": "materials/03-colors.html#build-custom-color-scales-sequential-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Sequential",
    "text": "Build Custom Color Scales: Sequential\n\nplot(color(dubois_pal_c()(50)))"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-sequential-2",
    "href": "materials/03-colors.html#build-custom-color-scales-sequential-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Sequential",
    "text": "Build Custom Color Scales: Sequential\n\nplot(color(dubois_pal_c(palette = \"light\", reverse = TRUE)(7)))"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-sequential-3",
    "href": "materials/03-colors.html#build-custom-color-scales-sequential-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Sequential",
    "text": "Build Custom Color Scales: Sequential\n\nscale_color_dubois_c <- function(palette = \"dark\", reverse = FALSE, ...) {\n  \n  # check function arguments\n  if (!palette %in% c(\"dark\", \"light\")) stop('Palette should be \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric.')\n\n  # apply color set to ggplot's gradientn scale\n  pal <- dubois_pal_c(palette = palette, reverse = reverse)\n  ggplot2::scale_color_gradientn(colours = pal(256), ...)\n}"
  },
  {
    "objectID": "materials/03-colors.html#build-custom-color-scales-sequential-4",
    "href": "materials/03-colors.html#build-custom-color-scales-sequential-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Build Custom Color Scales: Sequential",
    "text": "Build Custom Color Scales: Sequential\n\nscale_color_dubois_c <- function(palette = \"dark\", reverse = FALSE, ...) {\n  \n  # check function arguments\n  if (!palette %in% c(\"dark\", \"light\")) stop('Palette should be \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric.')\n\n  # apply color set to ggplot's gradientn scale\n  pal <- dubois_pal_c(palette = palette, reverse = reverse)\n  ggplot2::scale_color_gradientn(colours = pal(256), ...)\n}\n\nscale_fill_dubois_c <- function(palette = \"dark\", reverse = FALSE, ...) {\n  \n  if (!palette %in% c(\"dark\", \"light\")) stop('Palette should be \"dark\" or \"light\".')\n  if (!is.logical(reverse) & !is.numeric(reverse)) stop('reverse should be logical or numeric.')\n\n  pal <- dubois_pal_c(palette = palette, reverse = reverse)\n  ggplot2::scale_fill_gradientn(colours = pal(256), ...)\n}"
  },
  {
    "objectID": "materials/03-colors.html#use-your-custom-color-scales-sequential",
    "href": "materials/03-colors.html#use-your-custom-color-scales-sequential",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Your Custom Color Scales: Sequential",
    "text": "Use Your Custom Color Scales: Sequential\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_dubois_c()"
  },
  {
    "objectID": "materials/03-colors.html#use-your-custom-color-scales-sequential-1",
    "href": "materials/03-colors.html#use-your-custom-color-scales-sequential-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Your Custom Color Scales: Sequential",
    "text": "Use Your Custom Color Scales: Sequential\n\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_dubois_c(\n    palette = \"light\",\n    reverse = TRUE\n  )"
  },
  {
    "objectID": "materials/03-colors.html#evaluate-hcl-spectrum-5",
    "href": "materials/03-colors.html#evaluate-hcl-spectrum-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Evaluate HCL Spectrum",
    "text": "Evaluate HCL Spectrum\nMore on how to evaluate color palettes: HCLwizard and colorspace.\n\n\n\ncolorspace::specplot(\n  dubois_pal_c()(100)\n)\n\n\n\n\n\n\ncolorspace::specplot(\n  dubois_pal_c(palette = \"light\")(100)\n)"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd",
    "href": "materials/03-colors.html#emulate-cvd",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\n\ndeut <- \n  prismatic::clr_deutan(\n    dubois_pal_c()(100)\n  )\n\nggplot(filter(bikes, is_weekend == TRUE),\n       aes(x = temp_feel, y = count, \n           color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_gradientn(\n    colors = deut\n  )"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-1",
    "href": "materials/03-colors.html#emulate-cvd-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\n\ng1 <- \n  ggplot(filter(bikes, is_weekend == TRUE),\n         aes(x = temp_feel, y = count, \n             color = humidity)) +\n  geom_point(alpha = .7) +\n  scale_color_dubois_c()\n\ng1"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-2",
    "href": "materials/03-colors.html#emulate-cvd-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\ncolorblindr::cvd_grid(g1)"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-3",
    "href": "materials/03-colors.html#emulate-cvd-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\ncolorBlindness::cvdPlot(g1)"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-4",
    "href": "materials/03-colors.html#emulate-cvd-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\n\ng2 <- \n  ggplot(bikes, \n       aes(x = day_night, y = count, \n           fill = season)) +\n  geom_boxplot() +\n  scale_fill_manual(\n    values = carto_custom\n  )\n\ng2"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-5",
    "href": "materials/03-colors.html#emulate-cvd-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\ncolorblindr::cvd_grid(g2)"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-6",
    "href": "materials/03-colors.html#emulate-cvd-6",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\n\ng3 <- \n  ggplot(bikes, \n         aes(x = temp_feel, y = count,\n             color = season)) + \n  geom_point(\n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    aes(group = day_night),\n    method = \"lm\", color = \"black\"\n  ) +\n  scale_color_manual(\n    values = c(\"#6681FE\", \"#1EC98D\", \"#F7B01B\", \"#A26E7C\")\n  )\n\ng3"
  },
  {
    "objectID": "materials/03-colors.html#emulate-cvd-7",
    "href": "materials/03-colors.html#emulate-cvd-7",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Emulate CVD",
    "text": "Emulate CVD\n\ncolorblindr::cvd_grid(g3)"
  },
  {
    "objectID": "materials/03-colors.html#recap",
    "href": "materials/03-colors.html#recap",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Recap",
    "text": "Recap\n\n\n\nuse categorical palettes for qualitative data\n\ne.g.¬†scale_*_discrete() and scale_*_manual() for custom options\ne.g.¬†scale_*_viridis_d and scale_*_brewer() for pre-defined options\n\nuse sequential or diverging palettes for quantitative data\n\ne.g.¬†scale_*_gradient() or scale_*_gradient2() for custom options\ne.g.¬†scale_*_viridis_c and scale_*_distiller() for pre-defined options\n\nvarious packages provide palettes incl.¬†scale_* components\n\ne.g.¬†{rcartocolors}, {scico}, {ggsci}, {ggthemes}, {nord}\n\nthose and even more packages return palettes as vectors\n\nmodify and supply them to scale_*_manual() and scale_*_gradientn()\n\nuse after_scale to modify and recycle color scales"
  },
  {
    "objectID": "materials/03-colors.html#exercise-1",
    "href": "materials/03-colors.html#exercise-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Exercise",
    "text": "Exercise\n\n\nCreate a similar visualization as close as possible:"
  },
  {
    "objectID": "materials/03-colors.html#update-your-turn",
    "href": "materials/03-colors.html#update-your-turn",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "UPDATE Your Turn",
    "text": "UPDATE Your Turn\n\n\nLorem ipsum.\n\nDolor est."
  },
  {
    "objectID": "materials/03-colors.html#section-1",
    "href": "materials/03-colors.html#section-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "C√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/04-theming.html#theming",
    "href": "materials/04-theming.html#theming",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Theming",
    "text": "Theming\n\n= stylistic changes of non-data elements\n\n\ncomplete themes plus custom theme adjustments\n\neither add complete themes via theme_*()\nafterwards, theme settings can be overwritten via theme()"
  },
  {
    "objectID": "materials/04-theming.html#preparation-data",
    "href": "materials/04-theming.html#preparation-data",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation: Data",
    "text": "Preparation: Data\n\nlibrary(readr)\nlibrary(ggplot2)\n\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )"
  },
  {
    "objectID": "materials/04-theming.html#preparation-plot",
    "href": "materials/04-theming.html#preparation-plot",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation: Plot",
    "text": "Preparation: Plot\n\nbikes |>\n  dplyr::group_by(\n    month = lubridate::month(date, label = TRUE), \n    day_night, year\n  ) |> \n  dplyr::summarize(count = sum(count))\n\n# A tibble: 48 √ó 4\n# Groups:   month, day_night [24]\n   month day_night year   count\n   <ord> <chr>     <fct>  <int>\n 1 Jan   day       2015  398555\n 2 Jan   day       2016  423622\n 3 Jan   night     2015  148084\n 4 Jan   night     2016  158896\n 5 Feb   day       2015  398429\n 6 Feb   day       2016  438254\n 7 Feb   night     2015  145165\n 8 Feb   night     2016  154656\n 9 Mar   day       2015  511860\n10 Mar   day       2016  487395\n# ‚Ñπ 38 more rows"
  },
  {
    "objectID": "materials/04-theming.html#preparation-plot-1",
    "href": "materials/04-theming.html#preparation-plot-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation: Plot",
    "text": "Preparation: Plot\n\nbikes |>\n  dplyr::group_by(\n    month = lubridate::month(date, label = TRUE), \n    day_night, year\n  ) |> \n  dplyr::summarize(count = sum(count)) |> \n  ggplot(aes(x = month, y = count, color = day_night)) +\n  geom_line(aes(group = day_night)) +\n  geom_point(size = 2) +\n  facet_wrap(~ year, ncol = 1, scales = \"free_x\")"
  },
  {
    "objectID": "materials/04-theming.html#preparation-plot-2",
    "href": "materials/04-theming.html#preparation-plot-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation: Plot",
    "text": "Preparation: Plot\n\ng <- bikes |>\n  dplyr::group_by(month = lubridate::month(date, label = TRUE), day_night, year) |> \n  dplyr::summarize(count = sum(count)) |> \n  ggplot(aes(x = month, y = count, color = day_night)) +\n  geom_line(aes(group = day_night)) +\n  geom_point(size = 2) +\n  facet_wrap(~year, ncol = 1, scales = \"free_x\") +\n  coord_cartesian(clip = \"off\") +\n  scale_y_continuous(\n    limits = c(0, 830000), expand = c(0, 0),\n    labels = scales::label_comma(scale = 1/10^3, suffix = \"K\")\n  ) +\n  scale_color_manual(values = c(day = \"#FFA200\", night = \"#757BC7\")) +\n  labs(\n    x = NULL, y = \"# rented bikes\", color = NULL,\n    title = \"TfL Bike Shares per Month and Year\",\n    caption = \"Data: TfL (Transport for London)\"\n  )"
  },
  {
    "objectID": "materials/04-theming.html#complete-themes",
    "href": "materials/04-theming.html#complete-themes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Complete Themes",
    "text": "Complete Themes\n\n\n\ng + theme_light()\n\n\n\n\n\n\ng + theme_bw()"
  },
  {
    "objectID": "materials/04-theming.html#complete-themes-1",
    "href": "materials/04-theming.html#complete-themes-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Complete Themes",
    "text": "Complete Themes\n\n\n\ng + theme_minimal()\n\n\n\n\n\n\ng + theme_classic()"
  },
  {
    "objectID": "materials/04-theming.html#complete-themes-2",
    "href": "materials/04-theming.html#complete-themes-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Complete Themes",
    "text": "Complete Themes\n\n\n\ng + theme_dark()\n\n\n\n\n\n\ng + theme_void()"
  },
  {
    "objectID": "materials/04-theming.html#the-systemfonts-package",
    "href": "materials/04-theming.html#the-systemfonts-package",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "The {systemfonts} Package",
    "text": "The {systemfonts} Package\nlocates installed fonts and provides font-related utilities to graphic devices \n\n\nlibrary(systemfonts)\n\n\n\n\nmatch_font(\"Asap\", bold = TRUE)\n\n$path\n[1] \"/Users/cedric/Library/Fonts/Asap-Bold.ttf\"\n\n$index\n[1] 0\n\n$features\nNULL"
  },
  {
    "objectID": "materials/04-theming.html#use-non-default-typefaces",
    "href": "materials/04-theming.html#use-non-default-typefaces",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Non-Default Typefaces",
    "text": "Use Non-Default Typefaces\n\nsystem_fonts()\n\n# A tibble: 10,735 √ó 9\n   path                                                        index name                                       family       style weight width italic monospace\n   <chr>                                                       <int> <chr>                                      <chr>        <chr> <ord>  <ord> <lgl>  <lgl>    \n 1 /Users/cedric/Library/Fonts/MeshedDisplay-ExtBdSlant.otf        0 MeshedDisplay-ExtBdSlant                   Meshed Disp‚Ä¶ Extr‚Ä¶ ultra‚Ä¶ norm‚Ä¶ TRUE   FALSE    \n 2 /Users/cedric/Library/Fonts/LeagueSpartan-VF.ttf                5 LeagueSpartan-Extralight_Bold              League Spar‚Ä¶ Bold  bold   norm‚Ä¶ FALSE  FALSE    \n 3 /System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc        1 SinhalaSangamMN-Bold                       Sinhala San‚Ä¶ Bold  bold   norm‚Ä¶ FALSE  FALSE    \n 4 /Users/cedric/Library/Fonts/Gambarino-Regular.otf               0 Gambarino-Regular                          Gambarino    Regu‚Ä¶ normal norm‚Ä¶ FALSE  FALSE    \n 5 /Users/cedric/Library/Fonts/KolageGX.ttf                        8 Kolage_Black                               Kolage       Black heavy  norm‚Ä¶ FALSE  FALSE    \n 6 /Users/cedric/Library/Fonts/Styro-Variable.ttf                  3 Styro-Variable-Black_Medium                Styro Varia‚Ä¶ Medi‚Ä¶ normal norm‚Ä¶ FALSE  FALSE    \n 7 /Users/cedric/Library/Fonts/iosevka-curly-medium.ttc           14 Iosevka-Term-Curly-Medium-Extended-Oblique Iosevka Ter‚Ä¶ Medi‚Ä¶ medium norm‚Ä¶ TRUE   TRUE     \n 8 /Users/cedric/Library/Fonts/Aleo-Bold.ttf                       0 Aleo-Bold                                  Aleo         Bold  bold   norm‚Ä¶ FALSE  FALSE    \n 9 /Users/cedric/Library/Fonts/Henju-ExtraLight.otf                0 Henju-ExtraLight                           Henju        Extr‚Ä¶ light  norm‚Ä¶ FALSE  FALSE    \n10 /Users/cedric/Library/Fonts/MononokiNerdFont-BoldItalic.ttf     0 MononokiNF-BoldItalic                      Mononoki Ne‚Ä¶ Bold‚Ä¶ bold   norm‚Ä¶ TRUE   TRUE     \n# ‚Ñπ 10,725 more rows"
  },
  {
    "objectID": "materials/04-theming.html#use-non-default-typefaces-1",
    "href": "materials/04-theming.html#use-non-default-typefaces-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Non-Default Typefaces",
    "text": "Use Non-Default Typefaces\n\nsystem_fonts() |>\n  dplyr::filter(stringr::str_detect(family, \"Asap\")) |>\n  dplyr::select(family) |>\n  unique() |> \n  dplyr::arrange(family)\n\n# A tibble: 5 √ó 1\n  family            \n  <chr>             \n1 Asap              \n2 Asap Condensed    \n3 Asap Expanded     \n4 Asap SemiCondensed\n5 Asap SemiExpanded"
  },
  {
    "objectID": "materials/04-theming.html#use-non-default-typefaces-2",
    "href": "materials/04-theming.html#use-non-default-typefaces-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Non-Default Typefaces",
    "text": "Use Non-Default Typefaces\n\n\ng +\n  theme_minimal(\n    base_family = \"Asap SemiCondensed\",\n    base_size = 13\n  )"
  },
  {
    "objectID": "materials/04-theming.html#use-font-features",
    "href": "materials/04-theming.html#use-font-features",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Font Features",
    "text": "Use Font Features\n\nsystem_fonts() |>\n  dplyr::filter(family == \"Asap SemiCondensed\") |>\n  dplyr::select(name) |>\n  dplyr::arrange(name)\n\n# A tibble: 18 √ó 1\n   name                              \n   <chr>                             \n 1 AsapSemiCondensed-Black           \n 2 AsapSemiCondensed-BlackItalic     \n 3 AsapSemiCondensed-Bold            \n 4 AsapSemiCondensed-BoldItalic      \n 5 AsapSemiCondensed-ExtraBold       \n 6 AsapSemiCondensed-ExtraBoldItalic \n 7 AsapSemiCondensed-ExtraLight      \n 8 AsapSemiCondensed-ExtraLightItalic\n 9 AsapSemiCondensed-Italic          \n10 AsapSemiCondensed-Light           \n11 AsapSemiCondensed-LightItalic     \n12 AsapSemiCondensed-Medium          \n13 AsapSemiCondensed-MediumItalic    \n14 AsapSemiCondensed-Regular         \n15 AsapSemiCondensed-SemiBold        \n16 AsapSemiCondensed-SemiBoldItalic  \n17 AsapSemiCondensed-Thin            \n18 AsapSemiCondensed-ThinItalic"
  },
  {
    "objectID": "materials/04-theming.html#use-font-features-1",
    "href": "materials/04-theming.html#use-font-features-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Font Features",
    "text": "Use Font Features\n\nregister_variant(\n  name = \"Asap SemiCondensed Semibold S1\",\n  family = \"Asap SemiCondensed\",\n  weight = \"semibold\",\n  features = font_feature(letters = \"stylistic\")\n)"
  },
  {
    "objectID": "materials/04-theming.html#use-font-features-2",
    "href": "materials/04-theming.html#use-font-features-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Font Features",
    "text": "Use Font Features\n\n\ng + \n  theme_minimal(\n    base_family = \"Asap SemiCondensed Semibold S1\",\n    base_size = 13\n  )"
  },
  {
    "objectID": "materials/04-theming.html#use-font-features-3",
    "href": "materials/04-theming.html#use-font-features-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Font Features",
    "text": "Use Font Features"
  },
  {
    "objectID": "materials/04-theming.html#use-font-features-4",
    "href": "materials/04-theming.html#use-font-features-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Font Features",
    "text": "Use Font Features\n\nregister_variant(\n  name = \"Spline Sans Tabular\",\n  family = \"Spline Sans\",\n  weight = \"normal\",\n  features = font_feature(numbers = \"tabular\")\n)"
  },
  {
    "objectID": "materials/04-theming.html#use-font-features-5",
    "href": "materials/04-theming.html#use-font-features-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Use Font Features",
    "text": "Use Font Features"
  },
  {
    "objectID": "materials/04-theming.html#like-a-pro-set-theme-globally",
    "href": "materials/04-theming.html#like-a-pro-set-theme-globally",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Like a Pro: Set Theme Globally",
    "text": "Like a Pro: Set Theme Globally\n\ntheme_set(theme_minimal(base_family = \"Asap SemiCondensed\", base_size = 13))\n\ntheme_update(\n  panel.grid.minor = element_blank(),\n  strip.text = element_text(face = \"bold\", size = rel(1.1)),\n  plot.title = element_text(face = \"bold\", size = rel(1.3)),\n  plot.title.position = \"plot\",\n  plot.caption.position = \"plot\"\n)"
  },
  {
    "objectID": "materials/04-theming.html#like-a-pro-set-theme-globally-1",
    "href": "materials/04-theming.html#like-a-pro-set-theme-globally-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Like a Pro: Set Theme Globally",
    "text": "Like a Pro: Set Theme Globally\n\n\ng"
  },
  {
    "objectID": "materials/04-theming.html#complete-themes-whats-inside",
    "href": "materials/04-theming.html#complete-themes-whats-inside",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Complete Themes: What‚Äôs Inside?",
    "text": "Complete Themes: What‚Äôs Inside?\n\ntheme_grey\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    half_line <- base_size/2\n    t <- theme(line = element_line(colour = \"black\", linewidth = base_line_size, \n        linetype = 1, lineend = \"butt\"), rect = element_rect(fill = \"white\", \n        colour = \"black\", linewidth = base_rect_size, linetype = 1), \n        text = element_text(family = base_family, face = \"plain\", \n            colour = \"black\", size = base_size, lineheight = 0.9, \n            hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), \n            debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, \n        axis.line.y = NULL, axis.text = element_text(size = rel(0.8), \n            colour = \"grey30\"), axis.text.x = element_text(margin = margin(t = 0.8 * \n            half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * \n            half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * \n            half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * \n            half_line/2), hjust = 0), axis.ticks = element_line(colour = \"grey20\"), \n        axis.ticks.length = unit(half_line/2, \"pt\"), axis.ticks.length.x = NULL, \n        axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, \n        axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, \n        axis.ticks.length.y.right = NULL, axis.title.x = element_text(margin = margin(t = half_line/2), \n            vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line/2), \n            vjust = 0), axis.title.y = element_text(angle = 90, \n            margin = margin(r = half_line/2), vjust = 1), axis.title.y.right = element_text(angle = -90, \n            margin = margin(l = half_line/2), vjust = 0), legend.background = element_rect(colour = NA), \n        legend.spacing = unit(2 * half_line, \"pt\"), legend.spacing.x = NULL, \n        legend.spacing.y = NULL, legend.margin = margin(half_line, \n            half_line, half_line, half_line), legend.key = element_rect(fill = \"grey95\", \n            colour = NA), legend.key.size = unit(1.2, \"lines\"), \n        legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), \n        legend.text.align = NULL, legend.title = element_text(hjust = 0), \n        legend.title.align = NULL, legend.position = \"right\", \n        legend.direction = NULL, legend.justification = \"center\", \n        legend.box = NULL, legend.box.margin = margin(0, 0, 0, \n            0, \"cm\"), legend.box.background = element_blank(), \n        legend.box.spacing = unit(2 * half_line, \"pt\"), panel.background = element_rect(fill = \"grey92\", \n            colour = NA), panel.border = element_blank(), panel.grid = element_line(colour = \"white\"), \n        panel.grid.minor = element_line(linewidth = rel(0.5)), \n        panel.spacing = unit(half_line, \"pt\"), panel.spacing.x = NULL, \n        panel.spacing.y = NULL, panel.ontop = FALSE, strip.background = element_rect(fill = \"grey85\", \n            colour = NA), strip.clip = \"inherit\", strip.text = element_text(colour = \"grey10\", \n            size = rel(0.8), margin = margin(0.8 * half_line, \n                0.8 * half_line, 0.8 * half_line, 0.8 * half_line)), \n        strip.text.x = NULL, strip.text.y = element_text(angle = -90), \n        strip.text.y.left = element_text(angle = 90), strip.placement = \"inside\", \n        strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(half_line/2, \n            \"pt\"), strip.switch.pad.wrap = unit(half_line/2, \n            \"pt\"), plot.background = element_rect(colour = \"white\"), \n        plot.title = element_text(size = rel(1.2), hjust = 0, \n            vjust = 1, margin = margin(b = half_line)), plot.title.position = \"panel\", \n        plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)), \n        plot.caption = element_text(size = rel(0.8), hjust = 1, \n            vjust = 1, margin = margin(t = half_line)), plot.caption.position = \"panel\", \n        plot.tag = element_text(size = rel(1.2), hjust = 0.5, \n            vjust = 0.5), plot.tag.position = \"topleft\", plot.margin = margin(half_line, \n            half_line, half_line, half_line), complete = TRUE)\n    ggplot_global$theme_all_null %+replace% t\n}\n<bytecode: 0x12e7cd6b0>\n<environment: namespace:ggplot2>"
  },
  {
    "objectID": "materials/04-theming.html#complete-themes-whats-inside-1",
    "href": "materials/04-theming.html#complete-themes-whats-inside-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Complete Themes: What‚Äôs Inside?",
    "text": "Complete Themes: What‚Äôs Inside?\n\ntheme_minimal\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    theme_bw(base_size = base_size, base_family = base_family, \n        base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% \n        theme(axis.ticks = element_blank(), legend.background = element_blank(), \n            legend.key = element_blank(), panel.background = element_blank(), \n            panel.border = element_blank(), strip.background = element_blank(), \n            plot.background = element_blank(), complete = TRUE)\n}\n<bytecode: 0x11df48828>\n<environment: namespace:ggplot2>"
  },
  {
    "objectID": "materials/04-theming.html#create-a-custom-theme",
    "href": "materials/04-theming.html#create-a-custom-theme",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create a Custom Theme",
    "text": "Create a Custom Theme\n\ntheme_asap <- function(base_size = 13, base_family = \"Asap SemiCondensed\", \n                       base_line_size = base_size/22, base_rect_size = base_size/22) {\n  \n  theme_minimal(base_size = base_size, base_family = base_family, \n                base_line_size = base_line_size, base_rect_size = base_rect_size) \n}"
  },
  {
    "objectID": "materials/04-theming.html#create-a-custom-theme-1",
    "href": "materials/04-theming.html#create-a-custom-theme-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create a Custom Theme",
    "text": "Create a Custom Theme\n\ntheme_asap <- function(base_size = 13, base_family = \"Asap SemiCondensed\", \n                       base_line_size = base_size/22, base_rect_size = base_size/22) {\n  \n  theme_minimal(base_size = base_size, base_family = base_family, \n                base_line_size = base_line_size, base_rect_size = base_rect_size)  %+replace%\n    theme(\n      # add your theme changes here\n    )\n}"
  },
  {
    "objectID": "materials/04-theming.html#create-a-custom-theme-2",
    "href": "materials/04-theming.html#create-a-custom-theme-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create a Custom Theme",
    "text": "Create a Custom Theme\n\ntheme_asap <- function(base_size = 13, base_family = \"Asap SemiCondensed\", \n                       base_line_size = base_size/22, base_rect_size = base_size/22) {\n  \n  theme_minimal(base_size = base_size, base_family = base_family, \n                base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace%\n    theme(\n      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),\n                                family = \"Asap SemiCondensed Extrabold\", hjust = 0),\n      plot.title.position = \"plot\",\n      plot.caption = element_text(color = \"grey30\", margin = margin(t = base_size),\n                                  size = rel(0.8), hjust = 1, vjust = 1),\n      plot.caption.position = \"plot\",\n      axis.title.x = element_text(hjust = 0, vjust = 0, margin = margin(t = base_size/3)),\n      axis.title.y = element_text(hjust = 1, vjust = 0, angle = 90, margin = margin(r = base_size/3)),\n      panel.background = element_rect(fill = \"white\", color = \"grey20\"), \n      panel.border = element_rect(fill = NA, color = \"grey20\"), \n      plot.background = element_rect(fill = \"grey85\", color = NA), \n      legend.justification = \"top\",\n      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),\n      panel.grid.minor = element_blank(), \n      complete = TRUE\n    )\n}"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme",
    "href": "materials/04-theming.html#apply-the-custom-theme",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\n\ng + \n  theme_asap()"
  },
  {
    "objectID": "materials/04-theming.html#modify-an-existing-theme",
    "href": "materials/04-theming.html#modify-an-existing-theme",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Modify an Existing Theme",
    "text": "Modify an Existing Theme\n ‚Å†%+replace%\n\nreplaces the entire element; any element of a theme not specified in e2 will not be present in the resulting theme (i.e.¬†NULL).Thus this operator can be used to overwrite an entire theme.\n\n\n +\n\nupdates the elements of e1 that differ from elements specified (not NULL) in e2.Thus this operator can be used to incrementally add or modify attributes of a ggplot theme."
  },
  {
    "objectID": "materials/04-theming.html#create-a-custom-theme-3",
    "href": "materials/04-theming.html#create-a-custom-theme-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create a Custom Theme",
    "text": "Create a Custom Theme\n\ntheme_asap_plus <- function(base_size = 13, base_family = \"Asap SemiCondensed\", \n                            base_line_size = base_size/22, base_rect_size = base_size/22) {\n  \n  theme_minimal(base_size = base_size, base_family = base_family, \n                base_line_size = base_line_size, base_rect_size = base_rect_size) + \n    theme( \n      plot.title = element_text(size = rel(1.3), hjust = 0,\n                                family = \"Asap SemiCondensed Extrabold\"),\n      plot.title.position = \"plot\",\n      plot.caption = element_text(color = \"grey30\", margin = margin(t = base_size)),\n      plot.caption.position = \"plot\",\n      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),\n      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),\n      panel.background = element_rect(fill = \"white\", color = \"grey20\"), \n      panel.border = element_rect(fill = NA, color = \"grey20\"), \n      plot.background = element_rect(fill = \"grey85\", color = NA), \n      legend.justification = \"top\",\n      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),\n      panel.grid.minor = element_blank()\n    )\n}"
  },
  {
    "objectID": "materials/04-theming.html#versus-replace",
    "href": "materials/04-theming.html#versus-replace",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "+ versus %+replace%",
    "text": "+ versus %+replace%\n\n\n\ng + theme_asap_plus()\n\n\n\n\n\n\ng + theme_asap_replace()"
  },
  {
    "objectID": "materials/04-theming.html#modify-the-custom-theme",
    "href": "materials/04-theming.html#modify-the-custom-theme",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Modify the Custom Theme",
    "text": "Modify the Custom Theme\n\n\ng + \n  theme_asap() +\n  theme(\n    legend.position = \"top\",\n    plot.background = element_rect(\n      fill = NA, color = NA\n    )\n  )"
  },
  {
    "objectID": "materials/04-theming.html#modify-the-custom-theme-1",
    "href": "materials/04-theming.html#modify-the-custom-theme-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Modify the Custom Theme",
    "text": "Modify the Custom Theme\n\n\ng + \n  theme_asap(\n    base_size = 9,\n    base_family = \"Hepta Slab\"\n  )"
  },
  {
    "objectID": "materials/04-theming.html#modify-the-custom-theme-2",
    "href": "materials/04-theming.html#modify-the-custom-theme-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Modify the Custom Theme",
    "text": "Modify the Custom Theme\n\n\ng + \n  theme_asap(\n    base_size = 9,\n    base_family = \"Hepta Slab\"\n  ) +\n  theme(\n    plot.title = element_text(\n      family = \"Hepta Slab\"\n    )\n  )"
  },
  {
    "objectID": "materials/04-theming.html#create-a-custom-theme-4",
    "href": "materials/04-theming.html#create-a-custom-theme-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Create a Custom Theme",
    "text": "Create a Custom Theme\n\ntheme_asap_title <- function(base_size = 13, base_family = \"Asap SemiCondensed\", \n                             title_family = \"Asap SemiCondensed Extrabold\",\n                             base_line_size = base_size/22, base_rect_size = base_size/22) {\n  \n  if (title_family == \"Asap SemiCondensed Extrabold\") {\n    register_variant(name = \"Asap SemiCondensed Extrabold\",\n                     family = \"Asap SemiCondensed\",\n                     weight = \"ultrabold\")\n  }\n  \n  theme_minimal(base_size = base_size, base_family = base_family, \n                base_line_size = base_line_size, base_rect_size = base_rect_size) + \n    theme(\n      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family),\n      # fill in other theme adjustments here\n    )\n}"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-1",
    "href": "materials/04-theming.html#apply-the-custom-theme-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\n\ng +\n  theme_asap_title(\n    base_size = 9,\n    base_family = \"Hepta Slab\",\n    title_family = \"Hepta Slab\"\n  )"
  },
  {
    "objectID": "materials/04-theming.html#advanced-font-handling-for-themes",
    "href": "materials/04-theming.html#advanced-font-handling-for-themes",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Advanced Font Handling (for Themes)",
    "text": "Advanced Font Handling (for Themes)\n\ntheme_fonts <- function(base_size = 12, base_line_size = base_size/22, \n                        base_rect_size = base_size/22) {\n  \n  unavailable <- vector(\"character\")\n  \n  if (sum(grepl(\"Hepta Slab\", systemfonts::system_fonts()$family)) > 0) {\n    systemfonts::register_variant(\n      name = \"Hepta Slab Extrabold\",\n      family = \"Hepta Slab\",\n      weight = \"ultrabold\"\n    )\n    title_family <- \"Hepta Slab Extrabold\"\n  } else {\n    title_family <- \"\"\n    unavailable <- c(unavailable, \"Hepta Slab\")\n  }\n  \n  if (sum(grepl(\"Spline Sans\", systemfonts::system_fonts()$family)) > 0) {\n    base_family <- \"Spline Sans\"\n  } else {\n    base_family <- \"\"\n    unavailable <- c(unavailable, \"Spline Sans\")\n  }\n  \n  if (length(unavailable) > 0) {\n    unavailable <- data.frame(\n      name = unavailable, \n      url = paste0(\"https://fonts.google.com/specimen/\", sub(\" \", \"+\", unavailable))\n    )\n    message(paste(\n      \"Using system default typefaces.\", \n      \"For proper use, please install the following typeface(s):\",\n      paste0(\"  - \", unavailable$name, \": \", unavailable$url, collapse = \"\\n\"),\n      \"Then restart your R session.\",\n      sep = \"\\n\"\n    ))\n  }\n  \n  theme_asap(base_size = base_size, base_family = base_family, \n             base_line_size = base_line_size, base_rect_size = base_rect_size) + \n    theme(\n      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family)\n    )\n}"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-2",
    "href": "materials/04-theming.html#apply-the-custom-theme-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\ng + theme_fonts()\n\nUsing system default typefaces.For proper use, please install the following typeface(s):‚ÄÉ- Hepta Slab: https://fonts.google.com/specimen/Hepta+Slab‚ÄÉ- Spline: https://fonts.google.com/specimen/Spline+SansThen restart your R session."
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-3",
    "href": "materials/04-theming.html#apply-the-custom-theme-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\n\ng + theme_fonts()"
  },
  {
    "objectID": "materials/04-theming.html#add-more-arguments",
    "href": "materials/04-theming.html#add-more-arguments",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Add More Arguments",
    "text": "Add More Arguments\n\n\nturn grid lines on and off\ndefine alternative styles\nset a tabular fonts for axis and legend text\nadjust legend position\nadd/remove plot margin\ncontrol rendering of text elements\n‚Ä¶\n\n\n\nPro: Users don‚Äôt have to use theme().\n\n\nCon: Users don‚Äôt have to use theme()."
  },
  {
    "objectID": "materials/04-theming.html#add-more-arguments-1",
    "href": "materials/04-theming.html#add-more-arguments-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Add More Arguments",
    "text": "Add More Arguments\n\nturn grid lines on and off\ndefine alternative styles\nset a tabular fonts for axis and legend text\nadjust legend position\nadd/remove plot margin\ncontrol rendering of text elements\n‚Ä¶\n\nPro: Users don‚Äôt have to use theme().\nCon: Users don‚Äôt have to use theme()."
  },
  {
    "objectID": "materials/04-theming.html#add-more-arguments-2",
    "href": "materials/04-theming.html#add-more-arguments-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Add More Arguments",
    "text": "Add More Arguments\n\ntheme_asap_grid <- function(base_size = 13, base_family = \"Asap SemiCondensed\", grid = \"xy\", \n                            base_line_size = base_size/22, base_rect_size = base_size/22) {\n  out <- \n    theme_minimal(base_size = base_size, base_family = base_family, \n                  base_line_size = base_line_size, base_rect_size = base_rect_size) + \n    theme(\n      panel.grid.major = element_blank(),\n      axis.ticks = element_line(color = \"grey20\"),\n      axis.ticks.length = unit(base_size/2, \"pt\"),\n      # fill in other theme adjustments here\n    )\n  \n  if (stringr::str_detect(grid, \"x|X\")) {\n    out <- out + theme(panel.grid.major.x = element_line(color = \"grey87\"),\n                       axis.ticks.x = element_blank(),\n                       axis.ticks.length.x = unit(base_size/6, \"pt\"))\n  }\n  if (stringr::str_detect(grid, \"y|Y\")) {\n    out <- out + theme(panel.grid.major.y = element_line(color = \"grey87\"),\n                       axis.ticks.y = element_blank(),\n                       axis.ticks.length.y = unit(base_size/4, \"pt\"))\n  }\n  \n  return(out)\n}"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-4",
    "href": "materials/04-theming.html#apply-the-custom-theme-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\n\ng + \n  theme_asap_grid(\n    grid = \"y\"\n  )"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-5",
    "href": "materials/04-theming.html#apply-the-custom-theme-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\n\n\ng + theme_asap_grid()\n\n\n\n\n\ng + theme_asap_grid(grid = \"none\")"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-6",
    "href": "materials/04-theming.html#apply-the-custom-theme-6",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\n\ng + \n  theme_asap_grid(\n    grid = \"all\"\n  )"
  },
  {
    "objectID": "materials/04-theming.html#add-checks-to-the-custom-theme",
    "href": "materials/04-theming.html#add-checks-to-the-custom-theme",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Add Checks to the Custom Theme",
    "text": "Add Checks to the Custom Theme\n\ntheme_asap_grid <- function(base_size = 13, base_family = \"Asap SemiCondensed\", grid = \"xy\", \n                            base_line_size = base_size/22, base_rect_size = base_size/22) {\n  \n  if(!stringr::str_detect(grid, \"none|x|X|y|Y\")) stop('grid must be a character: \"none\" or any combination of \"X\", \"Y\", \"x\" and \"y\".')\n  \n  out <- \n    theme_minimal(base_size = base_size, base_family = base_family, \n                  base_line_size = base_line_size, base_rect_size = base_rect_size) + \n    theme(\n      panel.grid.major = element_blank(),\n      axis.ticks = element_line(color = \"grey20\"),\n      axis.ticks.length = unit(base_size/2, \"pt\"),\n      ## fill in other theme adjustments here\n    )\n  \n  if (stringr::str_detect(grid, \"x|X\")) {\n    out <- out + theme(panel.grid.major.x = element_line(color = \"grey87\"),\n                       axis.ticks.x = element_blank(),\n                       axis.ticks.length.x = unit(base_size/6, \"pt\"))\n  }\n  if (stringr::str_detect(grid, \"y|Y\")) {\n    out <- out + theme(panel.grid.major.y = element_line(color = \"grey87\"),\n                       axis.ticks.y = element_blank(),\n                       axis.ticks.length.y = unit(base_size/4, \"pt\"))\n  }\n  \n  return(out)\n}"
  },
  {
    "objectID": "materials/04-theming.html#apply-the-custom-theme-7",
    "href": "materials/04-theming.html#apply-the-custom-theme-7",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Apply the Custom Theme",
    "text": "Apply the Custom Theme\n\ng + \n  theme_asap_grid(\n    grid = \"all\"\n  )\n\nError in theme_asap_grid(grid = ‚Äúall‚Äù) :grid must be a character: ‚Äúnone‚Äù or any combination of ‚ÄúX‚Äù, ‚ÄúY‚Äù, ‚Äúx‚Äù and ‚Äúy‚Äù."
  },
  {
    "objectID": "materials/04-theming.html#your-turn",
    "href": "materials/04-theming.html#your-turn",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Your Turn",
    "text": "Your Turn\n\n\nCreate a corporate or funny custom theme.\n\nMake use of an existing complete theme to get started.\nPick a non-default font (or multiple) for your theme.\nOptional: Try working with font variants.\nOptional: Add other helpful arguments to your theme_* function."
  },
  {
    "objectID": "materials/04-theming.html#your-turn-1",
    "href": "materials/04-theming.html#your-turn-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Your Turn",
    "text": "Your Turn\n\n\nCreate a corporate or funny custom theme.\n\nMake use of an existing complete theme to get started.\nPick a non-default font (or multiple).\nOptional: Try working with font variants.\nOptional: Add other helpful arguments to your theme_* function.\n\nShowcase your theme using some example graphics.\n\nSave them to disk and share them with the group.\nIf you have added some additional arguments, feel free to share them as well."
  },
  {
    "objectID": "materials/04-theming.html#section",
    "href": "materials/04-theming.html#section",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "",
    "text": "C√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#exercise-1-1",
    "href": "materials/solutions/01-fundamentals-solution.html#exercise-1-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\nExplore the TfL bike share data visually:\n\nCreate a time series of counts per day and night.\nDraw box and whisker plots of average temperatures per season.\nVisualize bike counts per weather type and period as bar chart.\n\nPolish the charts and export them in a format of your choice."
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#preparation",
    "href": "materials/solutions/01-fundamentals-solution.html#preparation",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation",
    "text": "Preparation\n\nlibrary(readr)\nlibrary(ggplot2)\n\n## data\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )\n\n## plot style\ntheme_set(theme_minimal(base_family = \"Asap SemiCondensed\", base_size = 18))\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(fill = NA, color = NA)\n)"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#time-series",
    "href": "materials/solutions/01-fundamentals-solution.html#time-series",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Time Series",
    "text": "Time Series"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#box-and-whisker-plots",
    "href": "materials/solutions/01-fundamentals-solution.html#box-and-whisker-plots",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Box and Whisker Plots",
    "text": "Box and Whisker Plots"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  geom_col()"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-1",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(geom = \"col\")"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-2",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-2",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(geom = \"col\", fun = \"sum\", position = \"stack\")"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-3",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-3",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nbikes |>\n  group_by(weather_type, day_night) |>\n  summarize(count = sum(count)) |>\n  ggplot(aes(x = weather_type, y = count, fill = day_night)) + \n  geom_col()"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-4",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-4",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = count, y = weather_type, fill = day_night)) + \n  stat_summary(geom = \"col\", fun = \"sum\", position = \"stack\")"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-5",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-5",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(geom = \"col\", fun = \"sum\", position = \"dodge\")"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-6",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-6",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(\n    geom = \"col\", fun = \"sum\", \n    width = .7,\n    position = position_dodge(\n      width = .8, preserve = \"single\"\n    )\n  )"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-7",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-7",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + \n  stat_summary(\n    geom = \"col\", fun = \"sum\", \n    width = .7,\n    position = position_dodge2(\n      padding = .2, preserve = \"single\"\n    )\n  )"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#bar-chart-8",
    "href": "materials/solutions/01-fundamentals-solution.html#bar-chart-8",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Bar Chart",
    "text": "Bar Chart\n\nggplot(bikes, aes(x = stringr::str_wrap(weather_type, 10), \n                  y = count, fill = day_night)) +\n  stat_summary(\n    geom = \"col\", fun = \"sum\", \n    width = .7,\n    position = position_dodge2(padding = .2, preserve = \"single\")\n  ) +\n  scale_y_continuous(\n    labels = scales::label_comma(scale = 1/10^6, suffix = \"M\"),\n    expand = c(0, 0) \n  ) +\n  scale_fill_manual(\n    values = c(day = \"#FFA200\", night = \"#757bc7\")\n  ) +\n  labs(x = NULL, fill = \"Time of the day:\") +\n  theme(\n    panel.grid.major.x = element_blank(),\n    legend.position = \"top\",\n    legend.justification = \"left\"\n  )"
  },
  {
    "objectID": "materials/solutions/01-fundamentals-solution.html#exercise-2-1",
    "href": "materials/solutions/01-fundamentals-solution.html#exercise-2-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\nDiscuss / investigate with your neighbor:\n\nWhat are the differences between geom_line() and geom_path()?\nWhy can you use geom_smooth() and stat_smooth() interchangeably?\nWhat are the three ways to remove a legend from a ggplot?\nWhich is your favorite theme?\nWhat is your favorite ggplot2 extension package?\n\n\n\n\n\nC√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/solutions/02-text-solution.html#exercise-1-1",
    "href": "materials/solutions/02-text-solution.html#exercise-1-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Exercise 1",
    "text": "Exercise 1"
  },
  {
    "objectID": "materials/solutions/02-text-solution.html#preparation",
    "href": "materials/solutions/02-text-solution.html#preparation",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation",
    "text": "Preparation\n\nlibrary(readr)\nlibrary(ggplot2)\n\n## data\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )\n\n## plot style\ntheme_set(theme_minimal(base_family = \"Asap SemiCondensed\", base_size = 18))\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(fill = NA, color = NA)\n)\n\n\n\nC√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/solutions/03-colors-solution.html#exercise-1-1",
    "href": "materials/solutions/03-colors-solution.html#exercise-1-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Exercise 1",
    "text": "Exercise 1"
  },
  {
    "objectID": "materials/solutions/03-colors-solution.html#preparation",
    "href": "materials/solutions/03-colors-solution.html#preparation",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation",
    "text": "Preparation\n\nlibrary(readr)\nlibrary(ggplot2)\n\n## data\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )\n\n## plot style\ntheme_set(theme_minimal(base_family = \"Asap SemiCondensed\", base_size = 18))\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(fill = NA, color = NA)\n)\n\n\n\nC√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "materials/solutions/04-theming-solution.html#exercise-1-1",
    "href": "materials/solutions/04-theming-solution.html#exercise-1-1",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Exercise 1",
    "text": "Exercise 1"
  },
  {
    "objectID": "materials/solutions/04-theming-solution.html#preparation",
    "href": "materials/solutions/04-theming-solution.html#preparation",
    "title": "Engaging and Beautiful Data Visualizations with ggplot2",
    "section": "Preparation",
    "text": "Preparation\n\nlibrary(readr)\nlibrary(ggplot2)\n\n## data\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )\n\n## plot style\ntheme_set(theme_minimal(base_family = \"Asap SemiCondensed\", base_size = 18))\ntheme_update(\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(fill = NA, color = NA)\n)\n\n\n\nC√©dric Scherer // posit::conf(2023)"
  },
  {
    "objectID": "modules/s01-fundamentals.html",
    "href": "modules/s01-fundamentals.html",
    "title": "Fundamentals & Workflows",
    "section": "",
    "text": "View slides in full screen‚ÄÇ|‚ÄÇRun the code yourself\n\nOutline\n\nWelcome\nThe {ggplot2} Package\nThe {ggplot2} Showcase\nA Walk-Through Example\nSaving Plots\nExercises\n\n\n\nExercises\n\n\nExplore the TfL bike share data visually:\n\nCreate a time series of counts per day and night.\nDraw box and whisker plots of average temperatures per season.\nVisualize bike counts per weather type and period as bar chart.\n\nPolish the charts and export them in a format of your choice.\nDiscuss / investigate with your neighbor:\n\nWhat are the differences between geom_line() and geom_path()?\nWhy can you use geom_smooth() and stat_smooth() interchangeably?\nWhat are the three ways to remove a legend from a ggplot?\nWhich is your favorite theme?\nWhat is your favorite ggplot2 extension package?\n\n\n\n‚Üí‚ÄÇSolution"
  },
  {
    "objectID": "modules/s02-break.html",
    "href": "modules/s02-break.html",
    "title": "Coffee Break",
    "section": "",
    "text": "Please avoid questions during the breaks to give us a chance to recover and reflect. If you have urgent questions, please contact any of the TAs."
  },
  {
    "objectID": "modules/s03-text.html",
    "href": "modules/s03-text.html",
    "title": "Working with Text",
    "section": "",
    "text": "View slides in full screen‚ÄÇ|‚ÄÇRun the code yourself"
  },
  {
    "objectID": "modules/s03-text.html#exercise-1",
    "href": "modules/s03-text.html#exercise-1",
    "title": "Working with Text",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\n\n\n\n‚Üí‚ÄÇSolution"
  },
  {
    "objectID": "modules/s04-lunch.html",
    "href": "modules/s04-lunch.html",
    "title": "Lunch Break",
    "section": "",
    "text": "Warning\n\n\n\nPlease avoid questions during the lunch break to give us a chance to have a recover and reflect."
  },
  {
    "objectID": "modules/s05-colors.html",
    "href": "modules/s05-colors.html",
    "title": "Working with Colors",
    "section": "",
    "text": "View slides in full screen‚ÄÇ|‚ÄÇRun the code yourself"
  },
  {
    "objectID": "modules/s05-colors.html#exercise",
    "href": "modules/s05-colors.html#exercise",
    "title": "Working with Colors",
    "section": "Exercise",
    "text": "Exercise\n\n\n\n\n\n‚Üí‚ÄÇSolution"
  },
  {
    "objectID": "modules/s06-break.html",
    "href": "modules/s06-break.html",
    "title": "Coffee Break",
    "section": "",
    "text": "Please avoid questions during the breaks to give us a chance to recover and reflect. If you have urgent questions, please contact any of the TAs."
  },
  {
    "objectID": "modules/s07-theming.html",
    "href": "modules/s07-theming.html",
    "title": "Data Communication",
    "section": "",
    "text": "View slides in full screen‚ÄÇ|‚ÄÇRun the code yourself\n\nOutline\n\n\n\n\n\nRecap\n\n\n\n\n\n\n\nExercises\n\n\n\n\n\n‚Üí‚ÄÇSolution"
  },
  {
    "objectID": "prework.html",
    "href": "prework.html",
    "title": "Prework",
    "section": "",
    "text": "As this workshop focuses on (more) advanced topics, a solid understanding of the fundamentals of ggplot2 and also data preparation in R is helpful. The concepts of how to initialize a ggplot, map variables to aesthetics, and how aesthetics relate to scales should be familiar to you. If you want to refresh your knowledge, I suggest going through the first two chapters of the ggplot2 book by Hadley Wickham et al.¬†(introduction and getting started). The ‚ÄúR for Data Science‚Äù book also offers a good overview of ggplot2 as well as on data wrangling with the tidyverse.\nYou will need to bring your own laptop to the workshop with a recent version of R (4.3.1 or newer) and RStudio (2023.06.1 or newer) as well as a bunch of R packages and a few typefaces installed."
  },
  {
    "objectID": "prework.html#technical-requirements",
    "href": "prework.html#technical-requirements",
    "title": "Prework",
    "section": "Technical Requirements",
    "text": "Technical Requirements\n\nInstall R and Rstudio\nDownload the most recent version of R (cloud.r-project.org, at least version 4.2) and Rstudio (rstudio.com/products/rstudio/download, at least version 2023.06.1) and follow the installation steps.\n\n\nInstall R Libraries\nYou can install all required R packages at once by running the following code in the R command line:\npkgs <- c(\"ggplot2\", \"dplyr\", \"tibble\", \"tidyr\", \"readr\", \"forcats\", \n          \"stringr\", \"lubridate\", \"here\", \"scales\", \"ragg\", \n          \"systemfonts\", \"rcartocolor\", \"scico\", \"prismatic\", \n          \"patchwork\", \"ggtext\", \"ggforce\", \"ggrepel\")\ninstall.packages(setdiff(pkgs, rownames(installed.packages())))\nTo run the code, open up Rstudio. Copy‚Äìpaste the code in the console pane (by default in the lower left) and hit enter. Several messages should pop up. Scan these messages that are returned for errors and troubleshoot them if necessary. Warnings and other informational messages can be ignored.\nA few packages are not strictly needed but are used in some of the course material. If you wish to install all packages, run the following code as well:\npkgs_opt <- c(\"viridis\", \"RColorBrewer\", \"MetBrewer\", \"ggthemes\", \n              \"ggsci\", \"camcorder\", \"colorspace\", \"remotes\")\ninstall.packages(setdiff(pkgs_opt, rownames(installed.packages())))\n\nremotes::install_github(\"clauswilke/colorblindr\")\nIf, for some reason, you cannot install these packages or the latest versions of R and RStudio, we will have a Posit Cloud workspace set up that can be used instead. But you will still need to bring your laptop.\n\n\nInstall Typefaces\nWe will make use of custom fonts during the course. If you want to follow all contents locally, make sure the following typefaces are installed:\n\nAsap: fonts.google.com/specimen/Asap\nSpline Sans: fonts.google.com/specimen/Spline+Sans\nSpline Sans Mono: fonts.google.com/specimen/Spline+Sans+Mono\nHepta Slab: fonts.google.com/specimen/Hepta+Slab\n\nYou can download all typefaces as a single zip file here.\n\n\nFor Mac OS Users\nIf you want to save your visualization to PDF, please make sure that XQuartz is installed which is needed to use the cairo pdf device."
  },
  {
    "objectID": "prework.html#course-communication",
    "href": "prework.html#course-communication",
    "title": "Prework",
    "section": "Course Communication",
    "text": "Course Communication\nWe will be using Discord as our main communication method during the workshop. To make the process go smoothly: * Please sign up for an account at discord.com if you don‚Äôt already have one. * Make sure your display name is the one you used to register for the conference. In your ‚ÄúAbout Me‚Äù, put the name of your workshop(s).\nCloser to the start of the conference, you will be invited to join the posit::conf Discord server. Once you‚Äôve accepted the invite, we will add you to the channel for the workshop."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Monday, September 18, 2023\n\n\n\n\n\n\n\n\nTime\n\n\nModule\n\n\n\n\n\n\n\n\n\n09:00-10:30\n\n\nFundamentals & Workflows\n\n\n\n\n\n\n\n10:30-11:00\n\n\nCoffee Break\n\n\n\n\n\n\n\n11:00-12:30\n\n\nWorking with Text\n\n\n\n\n\n\n\n12:30-13:30\n\n\nLunch Break\n\n\n\n\n\n\n\n13:30-15:00\n\n\nWorking with Colors\n\n\n\n\n\n\n\n15:00-15:30\n\n\nCoffee Break\n\n\n\n\n\n\n\n15:30-17:00\n\n\nData Communication\n\n\n\n\n\n\nNo matching items"
  }
]