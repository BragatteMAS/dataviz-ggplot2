{
  "hash": "ccf122dd33db032ce0a85e1cc94306dd",
  "result": {
    "markdown": "---\ntitle: \"Engaging and Beautiful Data Visualizations with ggplot2\"\nsubtitle: \"<span style='font-size:2em;'>Fundamentals & Workflows</span>\"\nauthor: \"<a href='https://www.cedricscherer.com' style='color:#28a87d;font-weight:600;'>Cédric Scherer</a>&ensp;//&ensp;posit::conf&ensp;//&ensp;September 2023\"\nformat:\n  revealjs:\n    theme: slides.scss\n    logo: img/logo.png\n    footer: '[Cédric Scherer](https://cedricscherer.com) // posit::conf(2023)'\n    transition: fade\n    progress: true\n    multiplex: false\n    preview-links: true\n    scrollable: false\n    hide-inactive-cursor: true\n    highlight-style: printing\n    chalkboard:\n      theme: whiteboard\n      boardmarker-width: 4\n      buttons: true\n    pause: true\neditor: source\nknitr:\n  opts_chunk:\n    dev: \"ragg_png\"\n    retina: 3\n    dpi: 200\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  fig-width: 10.1\n  fig-height: 6.3\n  fig-align: center\n---\n\n\n\n\n\n# {ggplot2}\n\n\n##\n\n::: footer\n[{ggplot2} package description](https://ggplot2.tidyverse.org/)\n:::\n\n![](img/intro/ggplot2.png){fig-align=\"center\" fig-alt=\"The ggplot2 hex logo.\"}\n\n<br>\n\n<b style='font-size:30pt;'><code>{ggplot2}</code> is a system for declaratively creating graphics,<br>based on \"The Grammar of Graphics\" (Wilkinson 2005).</b>\n\n::: fragment\n[You provide the data, tell <code>{ggplot2}</code> how to]{style=\"font-size:24pt;\"} [map variables to aesthetics,]{.circle-highlight}<br>what graphical primitives to use, and it takes care of the details.\n:::\n\n## Advantages of {ggplot2}\n\n::: incremental\n-   consistent underlying \"grammar of graphics\" (Wilkinson 2005)\\\n-   very flexible, layered plot specification\\\n-   theme system for polishing plot appearance\\\n-   lots of additional functionality thanks to extensions\\\n-   active and helpful community\n:::\n\n\n## The Components of a ggplot\n\n<br>\n<table style='width:100%;font-size:16pt;'>\n  <tr>\n    <th>Component</th>\n    <th>Function</th>\n    <th>Explanation</th>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Data</b></td>\n    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    <td>*The raw data that you want to visualize.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>\n    <td><code>aes()</code></td>\n    <td>*The mapping between variables and visual properties*</td>\n  <tr>\n    <td><b style='color:#67676;'>Geometries</b></td>\n    <td><code>geom_*()</code></td>\n    <td>*The geometric shapes representing the data.*</td>\n  </tr>\n</table>\n\n--------------------------------------------------------------------------------\n\n![ggplot2 examples featured on [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org/)](img/basic-ggplots.png){fig-align=\"center\" fig-alt=\"A collection of the versatility of ggplot2 to create basic graphs. All of them use only data, aesthetics, and layers with the defaults of ggplot2.\"}\n\n\n## The Components of a ggplot\n\n\n<br>\n<table style='width:100%;font-size:16pt;'>\n  <tr>\n    <th>Component</th>\n    <th>Function</th>\n    <th>Explanation</th>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Data</b></td>\n    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    <td>*The raw data that you want to visualize.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>\n    <td><code>aes()</code></td>\n    <td>*The mapping between variables and visual properties.*</td>\n  <tr>\n    <td><b style='color:#67676;'>Geometries</b></td>\n    <td><code>geom_*()</code></td>\n    <td>*The geometric shapes representing the data.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Statistics</b></td>\n    <td><code>stat_*()</code></td>\n    <td>*The statistical transformations applied to the data.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Scales</b></td>\n    <td><code>scale_*()</code></td>\n    <td>*The representation of mapped aesthetic attributes.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Coordinate System</b></td>\n    <td><code>coord_*()</code></td>\n    <td>*The transformation to map data coordinates into the plot plane.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Facets</b></td>\n    <td><code>facet_*()</code></td>\n    <td>*The arrangement of the data into a grid of small multiples.*</td>\n  </tr>\n  <tr>\n    <td><b style='color:#67676;'>Visual Themes</b></td>\n    <td><code>theme() | theme_*()</code></td>\n    <td>*The overall visual defaults of non-data elements of the graphic.*</td>\n  </tr>\n</table>\n\n--------------------------------------------------------------------------------\n\n![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ah-ggplot2-exploratory.png){fig-align=\"center\" fig-alt=\"Allison Horsts monster illustration of explorative plotting with ggplot2.\"}\n\n--------------------------------------------------------------------------------\n\n![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ah-ggplot2-masterpiece.png){fig-align=\"center\" fig-alt=\"Allison Horsts monster illustration of building  data masterpiece ith ggplot2 featuring a little Picasso monster :)\"}\n\n\n# The {ggplot2} Showcase\n\n--------------------------------------------------------------------------------\n\n<br>\n\n![Collection of Graphics from the [BBC R Cookbook](https://bbc.github.io/rcookbook/)](img/showcase/bbc-gallery.png){fig-align=\"center\" fig-alt=\"A multi-plot panel of various data visualizations created by the BBC teams.\"}\n\n--------------------------------------------------------------------------------\n\n<br>\n\n![Collection of Graphics from the [BBC R Cookbook](https://bbc.github.io/rcookbook/)](img/showcase/bbc-gallery-quote.png){fig-align=\"center\" fig-alt=\"A multi-plot panel of various data visualizations created by the BBC teams.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Bill Dimensions of Brush-Tailed Penguins\"](https://github.com/Z3tt/TidyTuesday/tree/main/plots/2020_31)](img/showcase/palmer-penguins.png){fig-align=\"center\" fig-size=\"80%\" fig-alt=\"Distribution of coffee bean ratings by the Coffee Quality Institute for countries with 25 or more reviews (up to 2018). Distributions are shown as dot plots and multiple interval stripes.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Netflix Content Explosion\"](https://twitter.com/tanya_shapiro/status/1610419176333627393) by Tanya Shapiro](img/showcase/netflix-originals-tanya-shapiro.jpeg){fig-align=\"center\" fig-size=\"50%\" fig-alt=\"rea graph of number of Netflix original series over time, annotated with images and labels.\"}\n\n--------------------------------------------------------------------------------\n\n![My reinterpreted [The Economist graphic](https://www.economist.com/graphic-detail/2019/09/28/why-are-some-languages-spoken-faster-than-others)](img/showcase/speech-speed.png){fig-align=\"center\" fig-alt=\"The raincloud chart showing the distributions of normalized speech rates (dark pink) and information rates (dark lime green) across language families.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Not My Cup of Coffee\"](https://www.behance.net/gallery/100638417/Not-My-Cup-of-Coffee)](img/showcase/coffee-ratings.png){fig-align=\"center\" fig-alt=\"The raincloud chart showing the distributions of normalized speech rates (dark pink) and information rates (dark lime green) across language families.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Food Carbon Footprint Index 2018\"](https://github.com/Z3tt/TidyTuesday/tree/main/plots/2020_08)](img/showcase/20200307_TT_2020_08_CarbonFoodprint_alt.png){fig-align=\"center\" fig-alt=\"Two circular hierarchical bar plots showing the carbon footprint 2018 for food consumption and CO2 per continent and country.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Popular Programming Languages in CRAN Packages\"](https://twitter.com/spren9er/status/1195826547724374018) by Torsten Sprenger](img/showcase/cran-packages-torsten-sprenger.png){fig-align=\"center\" fig-alt=\"A circular tree showing the programing languages used in CRAN packages, with nodes being grouped by languages and package names, sized by number of lines.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Appearance of X-Men Characters\"](https://www.behance.net/gallery/100640345/Appearance-of-Popular-X-Men-Characters)](img/showcase/xmen-comics.png){fig-align=\"center\" fig-size=\"45%\" fig-alt=\"Streamgraphs showing the appearance of the most common X-Men characters (Wovlerine, Magneto, Nightcrawler, Storm & Gambit) during the so-called Claremont Run. Chris Claremont is a famous American comic book writer who was in charge of the Uncanny X-Men comic book series from 1975–1991. During that time he developed complex literary themes and strong female characters into superhero comics, and turning the X-Men into one of Marvel's most popular series.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"Artists in the US\"](https://twitter.com/leeolney3/status/1574656040599265280) by Lee Olney](img/showcase/artists-usa-lee-olney.png){fig-align=\"center\" fig-alt=\"A facet of barcodes showing location quotients from artists in the US by type and race.\"}\n\n--------------------------------------------------------------------------------\n\n<br>\n\n![My Contribution to the [SWDchallenge \"Small Multiples\"](https://www.storytellingwithdata.com/blog/2020/1/6/swdchallenge-small-multiples)](img/showcase/SWD_2020_01_SmallMultiples_grey.png){fig-align=\"center\" fig-alt=\"A facet of shots and goals of the Bundesliga football clubs in the season 2019/20.\"}\n\n--------------------------------------------------------------------------------\n\n![[\"European Energy Generation\"](github.com/jack-davison/tidytuesday) by Jack Davison](img/showcase/jack_davison.png){fig-align=\"center\" fig-alt=\"A gridded map of Europe showing horizontal stacked bars of energy production per country over time (each bar represents share among one year from 2016 to 2018).\"}\n\n--------------------------------------------------------------------------------\n\n![[Moon Charts as a Tile Grid Map](https://github.com/z3tt/grid-btw-wahlkreise-constituencies) showing the 2nd Vote Results from the German Election 2021](img/showcase/btw21_tile_grid_moon_second_de.png){fig-align=\"center\" fig-alt=\"A grid map using moon charts for all 297 electoral districts which show the share of the wnning party in second votesc during the German election in 2021.\"}\n\n--------------------------------------------------------------------------------\n\n![Our Winning Contribution to the [BES MoveMap Contest](https://besmovesig.wordpress.com/2021/02/25/mapping-movements-the-art-and-the-science-we-have-the-winners/)](img/showcase/20210131_BES_CheetahMap_rcarto.png){fig-align=\"center\" fig-alt=\"A spatial map of cheetah movement and their hotspot behaviour in Namibia.\"}\n\n--------------------------------------------------------------------------------\n\n![[Bivariate Choropleth x Hillshade Map](timogrossenbacher.ch/2019/04/bivariate-maps-with-ggplot2-and-sf) by Timo Gossenbacher](img/showcase/swiss_map.png){fig-align=\"center\" fig-alt=\"A spatial map of income and inequality shown with a bivariate color palette; alpine regions have a hillshading effect.\"}\n\n--------------------------------------------------------------------------------\n\n![Pixel Art by [Georgios Karamanis](https://karaman.is/)](img/showcase/bob-ross-pixel-art-georgios.png){fig-align=\"center\" fig-alt=\"A set of small multiples using pixelated encodings of certain elements in Bob Ross' paintings.\"}\n\n--------------------------------------------------------------------------------\n\n![Generative Art by [Thomas Lin Pedersen](https://www.data-imaginist.com/art)](img/showcase/genart.png){fig-align=\"center\" fig-alt=\"Two artworks by Thomas Pedersen, completely generated in R with ggplot2 (and pure magic).\"}\n\n\n# A Walk-Through Example\n\n\n## The Data Set\n\n<b style='font-size:2.3rem;'>Bike sharing counts in London, UK, powered by [TfL Open Data](https://tfl.gov.uk/modes/cycling/santander-cycles)</b>\n\n::: incremental\n-   covers the years 2015 and 2016\n-   incl. weather data acquired from [freemeteo.com](https://freemeteo.com)\n-   prepared by Hristo Mavrodiev for [Kaggle](https://www.kaggle.com/hmavrodiev/london-bike-sharing-dataset)\n-   further modification by myself\n:::\n\n\n## The Data Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(ggplot2)\n\nbikes <-\n  read_csv(\n    here::here(\"data\", \"london-bikes.csv\"),\n    col_types = \"Dcfffilllddddc\"\n  )\n```\n:::\n\n\n\n## The Data Set\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/view-data_08b7b3be3eee0339e21d78d3715ee833'}\n\n```{.r .cell-code}\nbikes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n# A tibble: 1,454 × 14\n   date       day_night year  month season count is_workday is_weekend is_holiday  temp temp_feel humidity wind_speed weather_type    \n   <date>     <chr>     <fct> <fct> <fct>  <int> <lgl>      <lgl>      <lgl>      <dbl>     <dbl>    <dbl>      <dbl> <chr>           \n 1 2015-01-04 day       2015  1     3       6830 FALSE      TRUE       FALSE       2.17     -0.75     95.2      10.4  broken clouds   \n 2 2015-01-04 night     2015  1     3       2404 FALSE      TRUE       FALSE       2.79      2.04     93.4       4.58 clear           \n 3 2015-01-05 day       2015  1     3      14763 TRUE       FALSE      FALSE       8.96      7.71     81.1       8.67 broken clouds   \n 4 2015-01-05 night     2015  1     3       5609 TRUE       FALSE      FALSE       7.12      5.71     79.5       9.04 cloudy          \n 5 2015-01-06 day       2015  1     3      14501 TRUE       FALSE      FALSE       9         6.46     80.2      19.2  broken clouds   \n 6 2015-01-06 night     2015  1     3       6112 TRUE       FALSE      FALSE       6.71      4.21     77.6      12.8  clear           \n 7 2015-01-07 day       2015  1     3      16358 TRUE       FALSE      FALSE       8.17      5.08     75.2      21.2  scattered clouds\n 8 2015-01-07 night     2015  1     3       4706 TRUE       FALSE      FALSE       6.68      3.86     81.3      18.1  clear           \n 9 2015-01-08 day       2015  1     3       9971 TRUE       FALSE      FALSE       9.46      7.12     79.4      18.8  scattered clouds\n10 2015-01-08 night     2015  1     3       5630 TRUE       FALSE      FALSE      10.0       8.46     79.2      22.2  clear           \n# ℹ 1,444 more rows\n```\n:::\n:::\n\n\n\n\n## The Data Set\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/data-table_78b1267b2d8c1d92c639963f8ed64a4f'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table lightable-minimal lightable-hover\" style=\"font-size: 20px; margin-left: auto; margin-right: auto; font-family: Spline Sans Mono; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Variable </th>\n   <th style=\"text-align:left;\"> Description </th>\n   <th style=\"text-align:left;\"> Class </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> date </td>\n   <td style=\"text-align:left;\"> Date encoded as `YYYY-MM-DD` </td>\n   <td style=\"text-align:left;\"> date </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> day_night </td>\n   <td style=\"text-align:left;\"> `day` (6:00am–5:59pm) or `night` (6:00pm–5:59am) </td>\n   <td style=\"text-align:left;\"> character </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> year </td>\n   <td style=\"text-align:left;\"> `2015` or `2016` </td>\n   <td style=\"text-align:left;\"> factor </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> month </td>\n   <td style=\"text-align:left;\"> `1` (January) to `12` (December) </td>\n   <td style=\"text-align:left;\"> factor </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> season </td>\n   <td style=\"text-align:left;\"> `0` (spring), `1` (summer), `2` (autumn), or `3` (winter) </td>\n   <td style=\"text-align:left;\"> factor </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> count </td>\n   <td style=\"text-align:left;\"> Sum of reported bikes rented </td>\n   <td style=\"text-align:left;\"> integer </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> is_workday </td>\n   <td style=\"text-align:left;\"> `TRUE` being Monday to Friday and no bank holiday </td>\n   <td style=\"text-align:left;\"> logical </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> is_weekend </td>\n   <td style=\"text-align:left;\"> `TRUE` being Saturday or Sunday </td>\n   <td style=\"text-align:left;\"> logical </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> is_holiday </td>\n   <td style=\"text-align:left;\"> `TRUE` being a bank holiday in the UK </td>\n   <td style=\"text-align:left;\"> logical </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> temp </td>\n   <td style=\"text-align:left;\"> Average air temperature (°C) </td>\n   <td style=\"text-align:left;\"> double </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> temp_feel </td>\n   <td style=\"text-align:left;\"> Average feels like temperature (°C) </td>\n   <td style=\"text-align:left;\"> double </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> humidity </td>\n   <td style=\"text-align:left;\"> Average air humidity (%) </td>\n   <td style=\"text-align:left;\"> double </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> wind_speed </td>\n   <td style=\"text-align:left;\"> Average wind speed (km/h) </td>\n   <td style=\"text-align:left;\"> double </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> weather_type </td>\n   <td style=\"text-align:left;\"> Most common weather type </td>\n   <td style=\"text-align:left;\"> character </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-full-1.png){width=2020}\n:::\n:::\n\n\n\n## A Default ggplot\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-0_54e69338bfad3e48c3cfc463ef22e77b'}\n\n```{.r .cell-code}\n# scatter plot of plot bikes$count versus bikes$temp_feel\nggplot(data = bikes) +              # initial call + data\n  aes(x = temp_feel, y = count) +   # aesthetics\n  geom_point()                      # geometric layer\n```\n:::\n\n\n\n## A Default ggplot\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-1_0e54cdfa411c3d3b234fefff974ba242'}\n\n```{.r .cell-code}\n# scatter plot of plot bikes$count versus bikes$temp_feel\nggplot(bikes, aes(x = temp_feel, y = count)) +\n  geom_point()\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-1_ef3f65b32793ec6d371133f6f7038b29'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-1-1.png){width=2020}\n:::\n:::\n\n\n\n## Combine Layers\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-2_f184aaeaa11b8515b6b82b001609e579'}\n\n```{.r .cell-code  code-line-numbers=\"3,4\"}\nggplot(bikes, aes(x = temp_feel, y = count)) +\n  geom_point() + \n  # add a GAM smoothing\n  stat_smooth() # also: geom_smooth()\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-2_91b3b1905cf1268438b7f56b0d731a6f'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-2-1.png){width=2020}\n:::\n:::\n\n\n\n## Mapping Aesthetics\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-3_293593d0c1a51009ba5eb8a59f7728ea'}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\nggplot(bikes, aes(x = temp_feel, y = count, color = day_night)) + \n  geom_point() + \n  stat_smooth()\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-3_88f47cdcb755f82a106c3104e6f61c8a'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-3-1.png){width=2020}\n:::\n:::\n\n\n\n##  Mapping Aesthetics\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-4_bc36b6670c28f6d74336be8eea1dc2f0'}\n\n```{.r .cell-code  code-line-numbers=\"2,3|4,5\"}\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  # color mapping only applied to points\n  geom_point(aes(color = day_night)) + \n  # invisible grouping to create two trend lines\n  stat_smooth(aes(group = day_night))\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-4_78c4aadf451b272dde9b6f8b9f90d1dd'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-4-1.png){width=2020}\n:::\n:::\n\n\n\n## Setting Properties\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-5_34ed96698fc797de07f96bd938e6c867'}\n\n```{.r .cell-code  code-line-numbers=\"2,4,5|7,9,10\"}\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = day_night), \n    # setting larger points with 50% opacity\n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    aes(group = day_night), \n    # use linear fitting + draw black smoothing lines\n    method = \"lm\", color = \"black\"\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-5_8fb70a2442398fd47b6e93b823111860'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-5-1.png){width=2020}\n:::\n:::\n\n\n\n## Split into Facets\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-6_e529afc4ea35d449fb64c893507c694f'}\n\n```{.r .cell-code  code-line-numbers=\"9,10|10|6,7,8\"}\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = day_night), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  # small multiples\n  facet_wrap(facets = vars(day_night)) # also: ~ day_night\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-6_27afd61089e430c690a7804868b50766'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-6-1.png){width=2020}\n:::\n:::\n\n\n\n## Split into Facets\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-7_95545d6c6b8eb53f8fb668d6bf3087d3'}\n\n```{.r .cell-code  code-line-numbers=\"9,10,11,12|3\"}\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = season), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  # small multiples\n  facet_grid(\n    rows = vars(day_night), cols = vars(year) # also: day_night ~ year\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-7_69b48889365752e9cd23674008e0f2a6'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-7-1.png){width=2020}\n:::\n:::\n\n\n\n## Free Facets Axes\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-8_fd9eff017a9fba3dbc48953c23b59afb'}\n\n```{.r .cell-code  code-line-numbers=\"11,12|13,14\"}\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = season), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  facet_grid(\n    day_night ~ year, \n    # free y axis range\n    scales = \"free_y\", \n    # scale heights proportionally\n    space = \"free_y\"\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-8_4245878b8777d05fe555922e5a7de0f1'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-8-1.png){width=2020}\n:::\n:::\n\n\n\n## Store ggplot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\ng1 <- \n  ggplot(bikes, aes(x = temp_feel, y = count)) + \n  geom_point(\n    aes(color = season), \n    alpha = .5, size = 1.5\n  ) + \n  stat_smooth(\n    method = \"lm\", color = \"black\"\n  ) +\n  facet_grid(\n    day_night ~ year, \n    scales = \"free_y\", \n    space = \"free_y\"\n  )\n```\n:::\n\n\n\n## Change the Axis Scaling\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-9a_71ca58800723ac3067ba987f2a91ea75'}\n\n```{.r .cell-code  code-line-numbers=\"1|2,3,8|4,5|6,7\"}\ng1 +\n  # x axis\n  scale_x_continuous(\n    # add °C symbol\n    labels = function(x) paste0(x, \"°C\"), \n    # use 5°C spacing\n    breaks = -1:6*5  # also: seq(-5, 30, by = 5)\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-9a_94c213b3e3298aee7aa24c2a76b7b869'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-9a-1.png){width=2020}\n:::\n:::\n\n\n\n## Change the Axis Scaling\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9,10,15|11,12|13,14|1\"}\ng2 <- g1 +\n  # x axis\n  scale_x_continuous(\n    # add °C symbol\n    labels = function(x) paste0(x, \"°C\"), \n    # use 5°C spacing\n    breaks = -1:6*5  # also: seq(-5, 30, by = 5)\n  ) +\n  # y axis\n  scale_y_continuous(\n    # add a thousand separator\n    labels = scales::label_comma(), \n    # use consistent spacing across rows\n    breaks = 0:5*10000\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-9b_a1f16b4bb9b70474a341331ddfd6cf88'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-9b-1.png){width=2020}\n:::\n:::\n\n\n\n## Use a Custom Color Palette\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-10a_a2b62e2d5909c2c1666aa1d893b05151'}\n\n```{.r .cell-code  code-line-numbers=\"2,3,4,5\"}\ng2 +\n  # use a custom color palette for season colors\n  scale_color_manual(\n    values = c(\"#6681FE\", \"#1EC98D\", \"#F7B01B\", \"#A26E7C\")\n  )\n```\n:::\n\n\n\n## Use a Custom Color Palette\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2,3,4,5,6,7|10,11,12\"}\n# use a named vector for explicit matching\ncolors <- c(\n  `0` = \"#1EC98D\",\n  `1` = \"#F7B01B\",\n  `2` = \"#A26E7C\",\n  `3` = \"#6681FE\"\n)\n\ng2 +\n  scale_color_manual(\n    values = colors\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-10_ce693f946c70482edbf1e765ddb060e1'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-10-1.png){width=2020}\n:::\n:::\n\n\n\n## Adjust Labels and Titles\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-11_2d7e0b13bceb12c6758e86b13d745705'}\n\n```{.r .cell-code  code-line-numbers=\"11,12\"}\n# use a named vector for explicit matching\ncolors <- c(\n  `0` = \"#1EC98D\",\n  `1` = \"#F7B01B\",\n  `2` = \"#A26E7C\",\n  `3` = \"#6681FE\"\n)\n\ng2 +\n  scale_color_manual(\n    values = colors,\n    # overwrite legend keys\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\")\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-11_9545eeba757f1a80bcb64ae741df7cec'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-11-1.png){width=2020}\n:::\n:::\n\n\n\n## Adjust Labels and Titles\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6,12|7,8|9,10,11\"}\ng3 <- g2 +\n  scale_color_manual(\n    values = colors,\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\")\n  ) +\n  labs(\n    # overwrite axis and legend titles\n    x = \"Average feels-like temperature\", y = NULL, color = NULL,\n    # add plot title and caption\n    title = \"Trends of Reported Bike Rents versus Feels-Like Temperature in London\",\n    caption = \"Data: TfL (Transport for London), Jan 2015–Dec 2016\"\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-12_fa8618f2346558525d91984fc7c63410'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-12-1.png){width=2020}\n:::\n:::\n\n\n\n## Apply a Complete Theme\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-13_8ce6babacc4b7bf8b34abbd3a8f15fc1'}\n\n```{.r .cell-code  code-line-numbers=\"2,3,4,5\"}\ng3 +\n  # add theme with a custom font + larger element sizes\n  theme_light(\n    base_size = 15, base_family = \"Spline Sans\"\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-13_7b4505b1ca4b548fdd479f0a368e2306'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-13-1.png){width=2020}\n:::\n:::\n\n\n\n## Apply a Complete Theme\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4,20|5,6,7|8,9,10,11,12,13,14|15,16|17,18|19\"}\ng4 <- g3 +\n  theme_light(base_size = 15, base_family = \"Spline Sans\") +\n  # theme adjustments\n  theme(\n    plot.title.position = \"plot\", # left-align title \n    plot.caption.position = \"plot\", # right-align caption\n    legend.position = \"top\", # place legend above plot\n    plot.title = element_text(face = \"bold\", size = rel(1.4)), # larger, bold title\n    axis.text = element_text(family = \"Spline Sans Mono\"), # monospaced font for axes\n    axis.title.x = element_text( # left-aligned, grey x axis label\n      hjust = 0, color = \"grey20\", margin = margin(t = 12)\n    ),\n    legend.text = element_text(size = rel(1)), # larger legend labels\n    strip.text = element_text(face = \"bold\", size = rel(1.15)), # larger, bold facet labels\n    panel.grid.major.x = element_blank(), # no vertical major lines\n    panel.grid.minor = element_blank(), # no minor grid lines\n    panel.spacing.x = unit(20, \"pt\"), # increase white space between panels\n    panel.spacing.y = unit(10, \"pt\"), # increase white space between panels\n    plot.margin = margin(rep(15, 4)) # adjust white space around plot\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-14_579d1a1dfaf0480650568783386a63ce'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-14-1.png){width=2020}\n:::\n:::\n\n\n\n## Adjust Legend\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-15_d3d277f36ff972c767f850750799d004'}\n\n```{.r .cell-code  code-line-numbers=\"2,3,4,5|4\"}\ng4 +\n  # adjust symbol size in legend\n  guides(\n    color = guide_legend(override.aes = list(size = 4))\n  )\n```\n:::\n\n\n\n## Adjust Legend\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-15b_6458e18188c6b9f6ebd8138a1213bb5f'}\n\n```{.r .cell-code  code-line-numbers=\"2,5,6,7|5,6\"}\ng4 +\n  scale_color_manual(\n    values = colors,\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\"),\n    # adjust symbol size in legend size\n    guide = guide_legend(override.aes = list(size = 4))\n  )\n```\n:::\n\n\n--------------------------------------------------------------------------------\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-15_c1f1277ad82b6cd039e09702caad009f'}\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/walkthrough-15-1.png){width=2020}\n:::\n:::\n\n\n\n--------------------------------------------------------------------------------\n\n## Full Code\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/walkthrough-full_8c95ed35a394e76e96f956adb5272781'}\n\n```{.r .cell-code}\n# create named color vector\ncolors <- c(\n  `0` = \"#1EC98D\",\n  `1` = \"#F7B01B\",\n  `2` = \"#A26E7C\",\n  `3` = \"#6681FE\"\n)\n\n# scatter plot of plot bikes$count versus bikes$temp_feel\nggplot(bikes, aes(x = temp_feel, y = count)) + \n  # add points\n  geom_point(\n    # color mapping only applied to points\n    aes(color = season), \n    # setting larger points with 50% opacity\n    alpha = .5, size = 1.5\n  ) + \n  # add a smoothing\n  stat_smooth(  # also: geom_smooth()\n    # use linear fitting + draw black smoothing lines\n    method = \"lm\", color = \"black\"\n  ) +\n  # small multiples\n  facet_grid(\n    day_night ~ year,  # also: vars(day_night), vars(year)\n    # free y axis range\n    scales = \"free_y\", \n    # scale heights proportionally \n    space = \"free_y\"\n  ) +\n  # x axis\n  scale_x_continuous(\n    # add °C symbol\n    labels = function(x) paste0(x, \"°C\"), \n    # use 5°C spacing\n    breaks = -1:6*5  # also: seq(-5, 30, by = 5)\n  ) +\n  # y axis\n  scale_y_continuous(\n    # add a thousand separator\n    labels = scales::label_comma(), \n    # use consistent spacing across rows\n    breaks = 0:5*10000\n  ) +\n  # colors\n  scale_color_manual(\n    # use a custom color palette\n    values = colors,\n    # overwrite legend keys\n    labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\"),\n    # adjust symbol size in legend size\n    guide = guide_legend(override.aes = list(size = 4))\n  ) +\n  labs(\n    # overwrite axis and legend titles\n    x = \"Average feels-like temperature\", y = NULL, color = NULL,\n    # add plot title and caption\n    title = \"Trends of Reported Bike Rents versus Feels-Like Temperature in London\",\n    caption = \"Data: TfL (Transport for London), Jan 2015–Dec 2016\"\n  ) +\n  # add theme with a custom font + larger element sizes\n  theme_light(\n    base_size = 15, base_family = \"Spline Sans\"\n  ) +\n  # theme adjustments\n  theme(\n    plot.title.position = \"plot\", # left-align title \n    plot.caption.position = \"plot\", # right-align caption\n    legend.position = \"top\", # place legend above plot\n    plot.title = element_text(face = \"bold\", size = rel(1.4)), # larger, bold title\n    axis.text = element_text(family = \"Spline Sans Mono\"), # monospaced font for axes\n    axis.title.x = element_text( # left-aligned, grey x axis label\n      hjust = 0, color = \"grey20\", margin = margin(t = 12)\n    ),\n    legend.text = element_text(size = rel(1)), # larger legend labels\n    strip.text = element_text(face = \"bold\", size = rel(1.15)), # larger, bold facet labels\n    panel.grid.major.x = element_blank(), # no vertical major lines\n    panel.grid.minor = element_blank(), # no minor grid lines\n    panel.spacing.x = unit(20, \"pt\"), # increase white space between panels\n    panel.spacing.y = unit(10, \"pt\"), # increase white space between panels\n    plot.margin = margin(rep(15, 4)) # adjust white space around plot\n  )\n```\n:::\n\n\n\n# Saving Plots\n\n\n## Save the Graphic\n\n<br>\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save_e5f05ce158402d7e685982556d179209'}\n\n```{.r .cell-code}\nggsave(filename = \"my_plot.png\", plot = g)\n```\n:::\n\n\n::: fragment\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-implicit_9766c1583f2fbb00908b516d985f6453'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\")\n```\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-aspect_c4c7d92b369109a8c63e4d3acb8b3a4a'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", width = 6, height = 5, dpi = 600)\n```\n:::\n\n:::\n\n\n## Plot Resolution\n\n\n\n\n\n::: {layout-ncol=\"2\"}\n![](plots/resolution-dpi-100.png)\n\n![](plots/resolution-dpi-600.png)\n:::\n\n\n## Plot Resolution\n\n::: {layout-ncol=\"2\"}\n![](img/resolution-dpi-100-zoom.png)\n\n![](img/resolution-dpi-600-zoom.png)\n:::\n\n\n## Save the Graphic\n\n<br>\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save_439dcf333a92406ebd8f3987d6bf9287'}\n\n```{.r .cell-code}\nggsave(filename = \"my_plot.png\", plot = g)\n```\n:::\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-implicit_c5fdbcc9003675c2f0008fca98c36874'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\")\n```\n:::\n\n\n<br>\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-aspect_c7758af26f1a01644a26e5432e2f2d0c'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", width = 6, height = 5, dpi = 600)\n```\n:::\n\n\n::: fragment\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-unit_1cb025e0ae788e688d21927fee627091'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", width = 6*2.54, height = 5*2.54, unit = \"cm\", dpi = 600)\n```\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-raster-agg_7717fd36fbcc79947a3b710ba2e06004'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", device = agg_png)\n```\n:::\n\n:::\n\n::: fragment\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-cairo_b9eb653fefdb960c5af7f9f35c0916ab'}\n\n```{.r .cell-code}\nggsave(\"my_plot.pdf\", device = cairo_pdf)\n```\n:::\n\n:::\n\n\n--------------------------------------------------------------------------------\n\n<br>\n\n![Modified from canva.com](img/vector-raster-canva.png){fig-alt=\"A comparison of vector and raster graphics.\" fig-width=\"150%\"}\n\n\n\n## The {ragg} Package\n\n<span class='simple-highlight-grn' style='font-size:2.1rem;'>provides drop-in replacements for the default raster graphic devices</span>\n\n::: incremental\n\n* faster\n* direct access to all system fonts\n* advanced text rendering\n  * including support for right-to-left text, emojis, and font fallback\n* high quality anti-aliasing\n* high quality rotated text\n* supports 16-bit output\n* system independent rendering\n\n:::\n\n\n## The {ragg} Package\n\n<br>\n\n![Source: [tidyverse.org/blog/2021/02/modern-text-features](https://www.tidyverse.org/blog/2021/02/modern-text-features/)](img/ragg-left-and-right.png){fig-align=\"center\" fig-alt=\"A comparison of different graphic devices in R comparing the rendering of right-to-left text (and mixing left-to-right and right-to-left text).\"}\n\n\n## The {ragg} Package\n\n<br>\n\n![Source: [tidyverse.org/blog/2021/02/modern-text-features](https://www.tidyverse.org/blog/2021/02/modern-text-features/)](img/ragg-ligatures.png){fig-align=\"center\" fig-alt=\"A comparison of different graphic devices in R comparing the rendering of font ligatures.\"}\n\n\n## The {ragg} Package\n\n<br>\n\n![Source: [tidyverse.org/blog/2021/02/modern-text-features](https://www.tidyverse.org/blog/2021/02/modern-text-features/)](img/ragg-emojis.png){fig-align=\"center\" fig-alt=\"A comparison of different graphic devices in R comparing the rendering of emojis.\"}\n\n\n## The {ragg} Package\n\n<br>\n\n![Source: [tidyverse.org/blog/2021/02/modern-text-features](https://www.tidyverse.org/blog/2021/02/modern-text-features/)](img/ragg-fallback.png){fig-align=\"center\" fig-alt=\"A comparison of different graphic devices in R comparing the rendering missing glyphs, partly making use of fallback fonts.\"}\n\n\n## The {ragg} Package\n\n::: incremental\n* use {ragg} when saving ggplots by passing agg device function: `ggsave(device = agg_png))` ([used by default if installed](https://github.com/tidyverse/ggplot2/pull/4388))\n* use {ragg} in the *Rstudio Plots* pane be setting the backend to AGG: ![](img/ragg-rstudio.png){fig-alt=\"How to set the AGG device as the default in RStudio via Global Options > > General > Graphics > Backend.\"}\n* use {ragg} when knitting Rmarkdown files by setting `dev=\"ragg_png\"` in the code chunk options.\n\n:::\n\n\n## Save the Graphic\n\n<br>\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save_439dcf333a92406ebd8f3987d6bf9287'}\n\n```{.r .cell-code}\nggsave(filename = \"my_plot.png\", plot = g)\n```\n:::\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-implicit_c5fdbcc9003675c2f0008fca98c36874'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\")\n```\n:::\n\n\n<br>\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-aspect_c7758af26f1a01644a26e5432e2f2d0c'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", width = 6, height = 5, dpi = 600)\n```\n:::\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-unit_7b4c6b278330b6c7959419e4fe66e57e'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", width = 6*2.54, height = 5*2.54, unit = \"cm\", dpi = 600)\n```\n:::\n\n<br>\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-raster-agg_ee35fa72950cb04d7a1ba33120bd2923'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", device = agg_png)\n```\n:::\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-cairo_a437ddfca531433a3be58b3e32c0b6cf'}\n\n```{.r .cell-code}\nggsave(\"my_plot.pdf\", device = cairo_pdf)\n```\n:::\n\n\n::: fragment\n\n::: {.cell hash='01-fundamentals_cache/revealjs/ggplot-save-svg_04c01878d73ecdfe86e9bb01ec2cecfb'}\n\n```{.r .cell-code}\nggsave(\"my_plot.svg\")\n```\n:::\n\n:::\n\n\n--------------------------------------------------------------------------------\n\n![](img/figma-svg.png){fig-align=\"center\"}\n\n\n## How to Work with Aspect Ratios\n\n::: incremental\n-   don't rely on the Rstudio viewer pane!\n-   once you have a *\"it's getting close\"* prototype, settle on a plot size<br><br>\n-   **Approach 1:** save the file and inspect it—go back to your IDE—repeat\n    -   tedious and time-consuming...<br><br>\n-   **Approach 2:** use a qmd or rmd with inline output and chunk settings\n    -   set `fig-width` / `fig.width` and `fig-height` / `fig.height`<br>per chunk or globally<br><br>\n:::\n\n\n## Setting Plot Sizes in Quarto and Rmarkdown\n\n![](img/plot-size-chunk-yaml.png){fig-alt=\"A screenshot of an exemplary Qmd file with two chunks with different settings of fig-width and fig-height as YAML-styled options using the hashpipe. Unfortunately, these are not respected when the chunk output is printed inline.\" fig-width=\"60%\"}\n\n\n## Setting Plot Sizes in Quarto and Rmarkdown\n\n![](img/plot-size-chunk-inline.png){fig-alt=\"A screenshot of an exemplary Qmd file with two chunks with different settings of fig.width and fig.height set as inline chunk options.\" fig-width=\"60%\"}\n\n\n## How to Work with Aspect Ratios\n\n-   don't rely on the Rstudio viewer pane!\n-   once you have a *\"it's getting close\"* prototype, settle on a plot size<br><br>\n-   **Approach 1:** save the file and inspect it—go back to your IDE—repeat\n    -   tedious and time-consuming...<br><br>\n-   **Approach 2:** use a qmd or rmd with inline output and chunk settings\n    -   set `fig-width` / `fig.width` and `fig-height` / `fig.height`<br>per chunk or globally<br><br>\n-   **Approach 3:** use our [{camcorder} package](https://github.com/thebioengineer/camcorder)\n    -   saves output from all `ggplot()` calls and displays it in the viewer pane\n\n\n## Setting Plot Sizes via {camcorder}\n\n<br>\n\n![](img/plot-size-camcorder-a.png){fig-alt=\"A screenshot of an exemplary R script with a plot automatically saved and isplayed in correct aspect ratio thanks to the camcorder package.\" fig-width=\"120%\"}\n\n\n## Setting Plot Sizes via {camcorder}\n\n<br>\n\n![](img/plot-size-camcorder-b.png){fig-alt=\"A screenshot of an exemplary R script with a plot automatically saved and isplayed in correct aspect ratio thanks to the camcorder package.\" fig-width=\"120%\"}\n\n\n## Setting Plot Sizes via {camcorder}\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/camcorder-record_00dad4ac42afbc08553cc5c510c3d7ea'}\n\n```{.r .cell-code  code-line-numbers=\"1,2,3,4,5,6,7|9,10,11,12,13,15\"}\ncamcorder::gg_record(\n  dir = here::here(\"temp\"),  # path for plot files\n  device = \"png\",            # device to use\n  width = 10,                # figure width\n  height = 5,                # figure height\n  dpi = 600                  # plot resolution\n)\n\ng <- ggplot(bikes, aes(x = temp, y = count, color = day_night)) +\n  geom_point(alpha = .3, size = 2) +\n  scale_color_manual(values = c(day = \"#FFA200\", night = \"#757BC7\")) +\n  theme_minimal(base_size = 14, base_family = \"Asap SemiCondensed\") +\n  theme(panel.grid.minor = element_blank())\n\ng\n```\n:::\n\n\n\n## Setting Plot Sizes via {camcorder}\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/camcorder-resize_8c9dabd1c4d2661597733e6d716f0424'}\n\n```{.r .cell-code  code-line-numbers=\"17,19\"}\ncamcorder::gg_record(\n  dir = here::here(\"temp\"),  # path for plot files\n  device = \"png\",            # device to use\n  width = 10,                # figure width\n  height = 5,                # figure height\n  dpi = 600                  # plot resolution\n)\n\ng <- ggplot(bikes, aes(x = temp, y = count, color = day_night)) +\n  geom_point(alpha = .3, size = 2) +\n  scale_color_manual(values = c(day = \"#FFA200\", night = \"#757BC7\")) +\n  theme_minimal(base_size = 14, base_family = \"Asap SemiCondensed\") +\n  theme(panel.grid.minor = element_blank())\n\ng\n\ncamcorder::gg_resize_film(width = 20) # update figure width\n\ng\n```\n:::\n\n\n\n## Like a Pro: Set Theme Globally\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_minimal(base_size = 14, base_family = \"Asap SemiCondensed\"))\ntheme_update(panel.grid.minor = element_blank())\n```\n:::\n\n\n\n# Programming <br>with ggplot2\n\n\n## Conditional Components\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/conditional-components_caef70472f777a01248d33a3f284f406'}\n\n```{.r .cell-code  code-line-numbers=\"1|3,4,5|4\"}\nsmooth <- TRUE\n\nggplot(bikes, aes(x = temp, y = humidity)) +\n  { if(smooth) geom_smooth(color = \"red\") } +\n  geom_point(alpha = .5)\n```\n:::\n\n\n\n## Conditional Components\n\n\n::: {.cell layout-align=\"center\" hash='01-fundamentals_cache/revealjs/conditional-components-1_af3590b704ded767678e130b9bed0532'}\n\n```{.r .cell-code}\nsmooth <- TRUE\n\nggplot(bikes, aes(x = temp, y = humidity)) +\n  { if(smooth) geom_smooth(color = \"red\") } +\n  geom_point(alpha = .5)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/conditional-components-1-1.png){fig-align='center' width=1600}\n:::\n:::\n\n\n\n## Conditional Components\n\n\n::: {.cell layout-align=\"center\" hash='01-fundamentals_cache/revealjs/conditional-components-2_f29ca7457d58aeba72af8364052998e2'}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\nsmooth <- FALSE\n\nggplot(bikes, aes(x = temp, y = humidity)) +\n  { if(smooth) geom_smooth(color = \"red\") } +\n  geom_point(alpha = .5)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/conditional-components-2-1.png){fig-align='center' width=1600}\n:::\n:::\n\n\n\n## Wrapper Functions for Plots\n\n\n::: {.cell hash='01-fundamentals_cache/revealjs/conditional-components-function_bbcbb08aec8f13e9bfdf6dcd42f130a4'}\n\n```{.r .cell-code  code-line-numbers=\"1,5|2,3,4\"}\ndraw_scatter <- function(smooth = TRUE) {\n  ggplot(bikes, aes(x = temp, y = humidity)) +\n    { if(smooth) geom_smooth(color = \"red\") } +\n    geom_point(alpha = .5)\n}\n```\n:::\n\n\n\n## Wrapper Functions for Plots\n\n\n::: {.cell output-location='column' hash='01-fundamentals_cache/revealjs/conditional-components-function-plot-default_b88942c23d103843491ed566b4ee8391'}\n\n```{.r .cell-code}\ndraw_scatter()\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/conditional-components-function-plot-default-1.png){width=1000}\n:::\n:::\n\n\n\n## Wrapper Functions for Plots\n\n\n::: {.cell output-location='column' hash='01-fundamentals_cache/revealjs/conditional-components-function-plot-false_9e465abdd77a1628e20f9b9194f5c781'}\n\n```{.r .cell-code}\ndraw_scatter(smooth = FALSE)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/conditional-components-function-plot-false-1.png){width=1000}\n:::\n:::\n\n\n\n## Components as Functions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2,7|3,6|4,5\"}\ngeom_scatterfit <- function(pointsize = 1, pointalpha = 1, \n                            method = \"lm\", linecolor = \"red\", ...) {\n  list(\n    geom_point(size = pointsize, alpha = pointalpha, ...),\n    geom_smooth(method = method, color = linecolor, ...)\n  )\n}\n```\n:::\n\n\n\n## Components as Functions\n\n\n::: {.cell output-location='column' hash='01-fundamentals_cache/revealjs/function-components-defaults_b82bb4e1013de3757c454e7f445193ef'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggplot(bikes,\n       aes(x = humidity, y = count)) +\n  geom_scatterfit()\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-components-defaults-1.png){width=1000}\n:::\n:::\n\n\n\n## Components as Functions\n\n\n::: {.cell output-location='column' hash='01-fundamentals_cache/revealjs/function-components-args_448e12a2543c9566d1ee79e2ba7225a1'}\n\n```{.r .cell-code  code-line-numbers=\"4,5\"}\nggplot(bikes,\n       aes(x = humidity, y = count)) +\n  geom_scatterfit(\n    color = \"#28A87D\", \n    size = 3\n  )\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-components-args-1.png){width=1000}\n:::\n:::\n\n\n\n## Components as Functions\n\n\n::: {.cell output-location='column' hash='01-fundamentals_cache/revealjs/function-components-custom_0855f87dcad4c1979956d8c4ba0fb5cc'}\n\n```{.r .cell-code  code-line-numbers=\"1,2|4,5,6,7\"}\nggplot(diamonds, \n       aes(x = carat, y = price)) +\n  geom_scatterfit(\n    pointsize = .5, \n    pointalpha = .1,\n    method = \"gam\",\n    linecolor = \"#EFAC00\"\n  )\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-components-custom-1.png){width=1000}\n:::\n:::\n\n\n\n## Components as Functions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,14|2,13|3,4,5,6,7|8,9,10,11,12\"}\nscales_log <- function(sides = \"xy\") {\n  list(\n    if(stringr::str_detect(sides, \"x\")) {\n      scale_x_log10(\n        breaks = c(10^(1:100)), labels = scales::label_log()\n      )\n    },\n    if(stringr::str_detect(sides, \"y\")) {\n      scale_y_log10(\n        breaks = c(10^(1:100)), labels = scales::label_log()\n      )\n    }\n  )\n}\n```\n:::\n\n\n\n## Components as Functions\n\n\n::: {.cell output-location='column' hash='01-fundamentals_cache/revealjs/function-components-scales-custom_5b6321eab679a1975d13c047c2a99c10'}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nggplot(diamonds, \n       aes(x = carat, y = price)) +\n  geom_scatterfit(\n    pointsize = .5, \n    pointalpha = .1,\n    method = \"gam\",\n    linecolor = \"#EFAC00\"\n  ) +\n  scales_log(sides = \"y\")\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-components-scales-custom-1.png){width=1000}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,11|2,3,4|5,6,7,8,9|1,4,9\"}\ntrends_monthly <- function(grp = \"January\") {\n  bikes |> \n    dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) |> \n    dplyr::filter(month %in% grp) |> \n    ggplot(aes(x = temp, y = count, color = day_night)) +\n    geom_point(alpha = .2, show.legend = FALSE) +\n    geom_smooth(se = FALSE) +\n    scale_color_manual(values = c(\"#FFA200\", \"#757bc7\")) +\n    labs(title = grp, x = \"Temperature\", y = \"Bike shares\", color = NULL)\n}\n```\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntrends_monthly(\"July\")\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-iterate-monthly-july-1.png){width=1000}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8,9,10\"}\ntrends_monthly <- function(grp = \"January\") {\n  bikes |> \n    dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) |> \n    dplyr::filter(month %in% grp) |> \n    ggplot(aes(x = temp, y = count, color = day_night)) +\n    geom_point(alpha = .2, show.legend = FALSE) +\n    geom_smooth(se = FALSE) +\n    # keep axis ranges consistent\n    scale_x_continuous(limits = range(bikes$temp)) +\n    scale_y_continuous(limits = range(bikes$count)) +\n    scale_color_manual(values = c(\"#FFA200\", \"#757bc7\")) +\n    labs(title = grp, x = \"Temperature\", y = \"Bike shares\", color = NULL)\n}\n```\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntrends_monthly(\"July\")\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-iterate-monthly-ranges-july-1.png){width=1000}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)\n```\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nplots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)\nplots[[9]]\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-iterate-monthly-ranges-purrr-single-1.png){fig-align='center' width=1600}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nplots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)\npatchwork::wrap_plots(plots)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-iterate-monthly-ranges-wrap-1.png){fig-align='center' width=3600}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,11|2|3,4|5,6,7|8,9,10\"}\nplot_density <- function(data, var, grp = \"\") {\n  ggplot(data, aes(x = !!sym(var))) +\n    geom_density(aes(fill = !!sym(grp)), position = \"identity\",\n                 color = \"grey30\", alpha = .3) +\n    coord_cartesian(expand = FALSE, clip = \"off\") +\n    scale_y_continuous(labels = scales::label_number()) +\n    scale_fill_brewer(palette = \"Dark2\", name = NULL) +\n    theme(legend.position = \"top\")\n}\n```\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nplot_density(\n  bikes, \"count\"\n)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-density-plot-1.png){width=1000}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1,2,3,4|2|3|5\"}\nplots <- purrr::map(\n  c(\"count\", \"temp\", \"humidity\", \"wind_speed\"), \n  ~ plot_density(data = bikes, var = .x, grp = \"day_night\")\n)\npatchwork::wrap_plots(plots, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-density-plot-grp-1.png){fig-align='center' width=2800}\n:::\n:::\n\n\n\n## Iterative Graphics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2|3|5\"}\nplots <- purrr::map(\n  names(dplyr::select(midwest, where(is.numeric))),\n  ~plot_density(data = midwest, var = .x)\n)\npatchwork::wrap_plots(plots)\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/function-density-plot-midwest-1.png){fig-align='center' width=4000}\n:::\n:::\n\n\n\n# Combine Plots\n\n\n## Combine Plots with {patchwork}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|3|5|7∂\"}\nlibrary(patchwork)\n\np1 <- plot_density(data = bikes, var = \"count\", grp = \"day_night\")\n\np2 <- plot_density(data = bikes, var = \"humidity\", grp = \"day_night\")\n\np3 <- ggplot(bikes, aes(x = humidity, y = count)) + geom_scatterfit(pointalpha = .3)\n```\n:::\n\n\n\n## Combine Plots with {patchwork}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 + p2) / p3\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/patchwork-example-1-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n## Combine Plots with {patchwork}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 + p2) / p3 + plot_layout(heights = c(1, 2))\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/patchwork-example-2-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n## Combine Plots with {patchwork}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 + p2) / p3 + plot_layout(heights = c(1, 2), guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/patchwork-example-3-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n## Combine Plots with {patchwork}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 + p2) / p3 + plot_layout(heights = c(1, 2), guides = \"collect\") +\n  plot_annotation(theme = theme(legend.justification = \"top\"))\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/patchwork-example-4-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n## Combine Plots with {patchwork}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(p1 + p2) / p3 + plot_layout(heights = c(1, 2), guides = \"collect\") +\n  plot_annotation(tag_levels = \"A\", tag_suffix = \".\", theme = theme(legend.justification = \"top\"))\n```\n\n::: {.cell-output-display}\n![](01-fundamentals_files/figure-revealjs/patchwork-example-5-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n\n# Exciting Extension Packages\n\n\n## Layers\n\n+ [**`{geofacet}`**](https://hafen.github.io/geofacet/) — tile grid maps\n+ [**`{ggalluvial}`**](https://github.com/hrbrmstr/ggalt) — alluvial plots\n+ [**`{ggalt}`**](https://github.com/hrbrmstr/ggalt) — dumbbell, horizon, and lollipop charts, splines, ...\n+ [**`{ggbeeswarm}`**](https://github.com/hrbrmstr/ggalt) — beeswarm plots and variants\n+ [**`{ggbraid}`**](https://nsgrantham.github.io/ggbraid/) — ribbons for alternating groups\n+ [**`{ggbump}`**](https://github.com/davidsjoberg/ggbump) — parallel sets, pie charts, geometries, splines, voronoi, ...\n+ [**`{ggdensity}`**](https://jamesotto852.github.io/ggdensity/) — improved density plots\n+ [**`{ggdist}`**](https://github.com/davidsjoberg/ggbump) — uncertainty visualizations\n+ [**`{ggforce}`**](https://ggforce.data-imaginist.com/) — several interesting layers (and more)\n+ [**`{ggpattern}`**](https://github.com/coolbutuseless/ggpattern) — pattern fills for layers\n\n\n## Layers (continued)\n\n+ [**`{ggpointdensity}`**](https://github.com/LKremer/ggpointdensity) — density gradients for scatter plots\n+ [**`{ggraph}`**](https://github.com/thomasp85/ggraph) — networks, graphs & trees\n+ [**`{ggridges}`**](https://github.com/clauswilke/ggridges) — ridgeline plots\n+ [**`{ggsankey}`**](https://github.com/davidsjoberg/ggsankey) — sankey diagrams\n+ [**`{ggsignif}`**](https://const-ae.github.io/ggsignif/) — significance levels\n+ [**`{ggstar}`**](https://github.com/xiangpin/ggstar) — more point shapes\n+ [**`{ggstream}`**](https://github.com/davidsjoberg/ggstream) — stream graphs\n+ [**`{ggupset}`**](https://github.com/const-ae/ggupset) — upset graphs\n+ [**`{treemapify}`**](https://wilkox.org/treemapify/) — treemaps\n\n\n## Utilities\n\n+ [**`{cowplot}`**](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html) — combine ggplots\n+ [**`{ggannotate}`**](https://github.com/MattCowgill/ggannotate) — point-n-click annotations\n+ [**`{ggblend}`**](https://mjskay.github.io/ggblend/) — blend, compose, adjust layers\n+ [**`{ggfittext}`**](https://wilkox.org/ggfittext/) — scale text according to space\n+ [**`{ggfx}`**](https://ggfx.data-imaginist.com/) — shaders and filters for layers\n+ [**`{ggh4x}`**](https://teunbrand.github.io/ggh4x/) — facets, positions, and more\n+ [**`{ggtext}`**](https://github.com/thomasp85/patchwork#patchwork) — text rendering for theme elements + text layers\n+ [**`{lemon}`**](https://github.com/stefanedwards/lemon) — axis lines (and a few layers)\n+ [**`{patchwork}`**](https://github.com/thomasp85/patchwork#patchwork) — combine ggplots\n+ [**`{scales}`**](https://scales.r-lib.org/) — control scales \n\n\n## Themes\n\n+ [**`{ggdark}`**](https://github.com/nsgrantham/ggdark)\n+ [**`{ggsci}`**](https://github.com/jrnold/ggthemes)\n+ [**`{ggtech}`**](https://github.com/ricardo-bion/ggtech)\n+ [**`{ggthemes}`**](https://github.com/jrnold/ggthemes)\n+ [**`{ggthemr}`**](https://github.com/Mikata-Project/ggthemr)\n+ [**`{hrbrthemes}`**](https://github.com/hrbrmstr/hrbrthemes)\n+ [**`{tvthemes}`**](https://ryo-n7.github.io/tvthemes/)\n\n\n## Interactive Charts\n\n+ [**`{ggiraph}`**](https://davidgohel.github.io/ggiraph/)\n+ [**`{plotly}`**](https://plotly.com/r/)\n+ [**`{echarts4r}`**](https://echarts4r.john-coene.com/)*\n+ [**`{highcharter}`**](https://jkunst.com/highcharter/)*\n+ [**`{charter}`**](https://github.com/JohnCoene/charter)*\n+ [**`{streamgraph}`**](https://hrbrmstr.github.io/streamgraph/)*\n+ [**`{tmap}`**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)*\n+ [**`{leaflet}`**](https://rstudio.github.io/leaflet/)*\n+ [**`{globe4r}`**](https://globe4r.john-coene.com/)*\n+ [**`{grapher}`**](https://grapher.network/)*\n\n<span style='font-size:.9em;'>* not using <code>ggplot2</code>\n\n# Exercises\n\n\n## Exercise 1\n\n::: question\n-   **Discuss / investigate with your neighbor:**\n    -  What are the differences between `geom_line()` and `geom_path()`?\n    -  Why can you use `geom_smooth()` and `stat_smooth()` interchangeably?\n    -  What are the three ways to *remove a legend* from a ggplot?\n:::\n\n\n## Exercise 2\n\n::: question\n-   **Explore the TfL bike share data visually:**\n    -  Create a *time series* of counts per day and night.\n    -  Draw *box and whisker plots* of average temperatures per month.\n    -  Visualize bike counts per weather type and period as *bar chart*. \n-   **Combine the three plots with {patchwork}.**\n-   **Export the final graphic in a format of your choice.**\n:::\n\n##  {background-image=\"img/exercise-what-now.png\" background-position=\"center\" background-size=\"75%\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}