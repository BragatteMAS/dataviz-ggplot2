---
title: "Engaging and Beautiful Data Visualizations with ggplot2"
subtitle: "<span style='font-size:2em;'>Fundamentals & Workflows</span><br><span style='font-weight:400;font-size:1.3em;'>— Exercise Solutions —</span>"
author: "<a href='https://www.cedricscherer.com' style='color:#28a87d;font-weight:600;'>Cédric Scherer</a>&ensp;//&ensp;posit::conf&ensp;//&ensp;September 2023</span></span>"
format:
  revealjs:
    theme: slides.scss
    footer: '[Cédric Scherer](https://cedricscherer.com) // posit::conf(2023)'
    transition: fade
    progress: true
    multiplex: false
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: printing
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: true
    pause: true
    mainfont: Cabinet Grotesk
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: false
  echo: true
  fig-width: 10
  fig-height: 6.2
  fig-align: center
---

# Exercise 1

## Exercise 1

::: question
-   **Explore the TfL bike share data visually:**
    -  Create a *time series* of counts per day and night.
    -  Draw *box and whisker plots* of average temperatures per season.
    -  Visualize bike counts per weather type and period as *bar chart*.
-   **Polish the charts and export them in a format of your choice.**
:::


## Preparation

```{r}
#| label: preparation
library(readr)
library(ggplot2)

## data
bikes <-
  read_csv(
    here::here("data", "london-bikes.csv"),
    col_types = "Dcfffilllddddc"
  )

## plot style
theme_set(theme_minimal(base_family = "Asap SemiCondensed", base_size = 18))
theme_update(
  panel.grid.minor = element_blank(),
  plot.background = element_rect(fill = NA, color = NA)
)
```


## Time Series

```{r}
#| label: timeseries

```


## Box and Whisker Plots

```{r}
#| label: boxplot

```


## Bar Chart

```{r}
#| label: barchart-1-geom
#| eval: false
#| purl: false
ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + 
  geom_col()
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-1-geom
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-2-stat
#| eval: false
#| purl: false
ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + 
  stat_summary(geom = "col")
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-2-stat
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-3-stat-fixed
#| eval: false
#| purl: false
ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + 
  stat_summary(geom = "col", fun = "sum", position = "stack")
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-3-stat-fixed
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-data-pre-proc
#| eval: false
bikes |>
  group_by(weather_type, day_night) |>
  summarize(count = sum(count)) |>
  ggplot(aes(x = weather_type, y = count, fill = day_night)) + 
  geom_col()
```


## Bar Chart

```{r}
#| label: barchart-4-horizontal
#| eval: false
#| purl: false
ggplot(bikes, aes(x = count, y = weather_type, fill = day_night)) + 
  stat_summary(geom = "col", fun = "sum", position = "stack")
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-4-horizontal
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-5-dodged
#| eval: false
#| purl: false
ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + 
  stat_summary(geom = "col", fun = "sum", position = "dodge")
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-5-dodged
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-6-position-1
#| eval: false
#| purl: false
ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + 
  stat_summary(
    geom = "col", fun = "sum", 
    width = .7,
    position = position_dodge(
      width = .8, preserve = "single"
    )
  )
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-6-position-1
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-7-position-2
#| eval: false
#| purl: false
ggplot(bikes, aes(x = weather_type, y = count, fill = day_night)) + 
  stat_summary(
    geom = "col", fun = "sum", 
    width = .7,
    position = position_dodge2(
      padding = .2, preserve = "single"
    )
  )
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-7-position-2
#| echo: false
```


## Bar Chart

```{r}
#| label: barchart-8-polished
#| eval: false
#| purl: false
ggplot(bikes, aes(x = stringr::str_wrap(weather_type, 10), 
                  y = count, fill = day_night)) +
  stat_summary(
    geom = "col", fun = "sum", 
    width = .7,
    position = position_dodge2(padding = .2, preserve = "single")
  ) +
  scale_y_continuous(
    labels = scales::label_comma(scale = 1/10^6, suffix = "M"),
    expand = c(0, 0) 
  ) +
  scale_fill_manual(
    values = c(day = "#FFA200", night = "#757bc7")
  ) +
  labs(x = NULL, fill = "Time of the day:") +
  theme(
    panel.grid.major.x = element_blank(),
    legend.position = "top",
    legend.justification = "left"
  )
```

--------------------------------------------------------------------------------

```{r}
#| label: barchart-8-polished
#| echo: false
```



# Exercise 2


## Exercise 2

::: question
-   **Discuss / investigate with your neighbor:**
    -  What are the differences between `geom_line()` and `geom_path()`?
    -  Why can you use `geom_smooth()` and `stat_smooth()` interchangeably?
    -  What are the three ways to *remove a legend* from a ggplot?
    -  Which is your favorite theme? 
    -  What is your favorite ggplot2 extension package?
:::
