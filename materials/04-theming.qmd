---
title: "Engaging and Beautiful Data Visualizations with ggplot2"
subtitle: "<span style='font-size:2em;'>Working with Themes</span>"
author: "<a href='https://www.cedricscherer.com' style='color:#28a87d;font-weight:600;'>Cédric Scherer</a>&ensp;//&ensp;posit::conf&ensp;//&ensp;September 2023"
format:
  revealjs:
    theme: slides.scss
    logo: img/logo.png
    footer: '[Cédric Scherer](https://cedricscherer.com) // posit::conf(2023)'
    transition: fade
    progress: true
    multiplex: false
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: printing
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: true
    pause: true
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: false
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

## Theming

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= stylistic changes of non-data elements</b><br><br>

::: incremental
-   complete themes plus custom theme adjustments
    -   either add complete themes via `theme_*()`
    -   afterwards, theme settings can be overwritten via `theme()`
:::


## Preparation: Data

```{r}
#| label: load-bikes-data
#| cache: false
library(readr)
library(ggplot2)

bikes <-
  read_csv(
    here::here("data", "london-bikes.csv"),
    col_types = "Dcfffilllddddc"
  )
```


## Preparation: Plot

```{r}
#| label: plot-data-prep
#| purl: false
#| code-line-numbers: "1|2,3,4,5|3|6"
bikes |>
  dplyr::group_by(
    month = lubridate::month(date, label = TRUE), 
    day_night, year
  ) |> 
  dplyr::summarize(count = sum(count))
```


## Preparation: Plot

```{r}
#| label: plot-basic
#| eval: false
#| purl: false
#| code-line-numbers: "7|8,9|10"
bikes |>
  dplyr::group_by(
    month = lubridate::month(date, label = TRUE), 
    day_night, year
  ) |> 
  dplyr::summarize(count = sum(count)) |> 
  ggplot(aes(x = month, y = count, color = day_night)) +
  geom_line(aes(group = day_night)) +
  geom_point(size = 2) +
  facet_wrap(~ year, ncol = 1, scales = "free_x")
```

--------------------------------------------------------------------------------

```{r}
#| label: plot-basic
#| echo: false
#| purl: false
#| fig-width: 5.5
#| fig-height: 6
#| fig-align: center
```


## Preparation: Plot

```{r}
#| label: plot-polished-code
#| purl: false
#| cache: false
#| code-line-numbers: "8|9,10,11,12|13|14,15,16,17,18"
g <- bikes |>
  dplyr::group_by(month = lubridate::month(date, label = TRUE), day_night, year) |> 
  dplyr::summarize(count = sum(count)) |> 
  ggplot(aes(x = month, y = count, color = day_night)) +
  geom_line(aes(group = day_night)) +
  geom_point(size = 2) +
  facet_wrap(~year, ncol = 1, scales = "free_x") +
  coord_cartesian(clip = "off") +
  scale_y_continuous(
    limits = c(0, 830000), expand = c(0, 0),
    labels = scales::label_comma(scale = 1/10^3, suffix = "K")
  ) +
  scale_color_manual(values = c(day = "#FFA200", night = "#757BC7")) +
  labs(
    x = NULL, y = "# rented bikes", color = NULL,
    title = "TfL Bike Shares per Month and Year",
    caption = "Data: TfL (Transport for London)"
  )
```

--------------------------------------------------------------------------------

```{r}
#| label: plot-polished
#| echo: false
#| fig-width: 5.5
#| fig-height: 6
#| fig-align: center
g
```


## Complete Themes

::: {layout-ncol="2"}
```{r}
#| label: complete-themes-light
#| fig-width: 5.5
#| fig-height: 6
g + theme_light()
```

::: fragment
```{r}
#| label: complete-themes-bw
#| fig-width: 5.5
#| fig-height: 6
g + theme_bw()
```
:::
:::


## Complete Themes

::: {layout-ncol="2"}
```{r}
#| label: complete-themes-minimal
#| fig-width: 5.5
#| fig-height: 6
g + theme_minimal()
```

::: fragment
```{r}
#| label: complete-themes-classic
#| fig-width: 5.5
#| fig-height: 6
g + theme_classic()
```
:::
:::


## Complete Themes

::: {layout-ncol="2"}
```{r}
#| label: complete-themes-dark
#| fig-width: 5.5
#| fig-height: 6
g + theme_dark()
```

::: fragment
```{r}
#| label: complete-themes-void
#| fig-width: 5.5
#| fig-height: 6
g + theme_void()
```
:::
:::


## The {systemfonts} Package

<span class='simple-highlight-grn' style='font-size:2.1rem;'>locates installed fonts and provides font-related utilities to graphic devices</span>
<br>

::: fragment

```{r}
#| label: systemfonts-load
library(systemfonts)
```

:::

::: fragment

```{r}
#| label: systemfonts-match-font-a
match_font("Asap", bold = TRUE)
```

:::


## Use Non-Default Typefaces

```{r}
#| label: systemfonts-table
#| class-output: hscroll
#| cache: false
system_fonts()
```


## Use Non-Default Typefaces

```{r}
#| label: systemfonts-filter-a
#| cache: false
#| code-line-numbers: "1,2,3,4,5|2"
system_fonts() |>
  dplyr::filter(stringr::str_detect(family, "Asap")) |>
  dplyr::select(family) |>
  unique() |> 
  dplyr::arrange(family)
```



## Use Non-Default Typefaces

```{r}
#| label: systemfonts-custom-font
#| output-location: column
#| code-line-numbers: "2,3,4,5|3"
g +
  theme_minimal(
    base_family = "Asap SemiCondensed",
    base_size = 13
  )
```


## Use Font Features

```{r}
#| label: systemfonts-filter-b
#| class-output: hscroll
#| code-line-numbers: "2,3,4"
system_fonts() |>
  dplyr::filter(family == "Asap SemiCondensed") |>
  dplyr::select(name) |>
  dplyr::arrange(name)
```


## Use Font Features

```{r}
#| label: systemfonts-register
#| cache: false
#| code-line-numbers: "1,2,3,4,5,6|1,6|2,3|2,4|2,5"
register_variant(
  name = "Asap SemiCondensed Semibold S1",
  family = "Asap SemiCondensed",
  weight = "semibold",
  features = font_feature(letters = "stylistic")
)
```


## Use Font Features

```{r}
#| label: systemfonts-register-plot
#| output-location: column
#| code-line-numbers: "3"
g + 
  theme_minimal(
    base_family = "Asap SemiCondensed Semibold S1",
    base_size = 13
  )
```


## Use Font Features

::: {layout-ncol="2"}
```{r}
#| label: systemfonts-font-variants-compare-1
#| echo: false
#| fig-width: 5.5
#| fig-height: 6.5
g + 
  ggtitle("You're boring... 😪") + 
  theme_minimal(base_family = "Asap SemiCondensed", base_size = 13) + 
  theme(plot.title = element_text(size = rel(2.2)), 
        plot.title.position = "plot",
        plot.margin = margin(rep(15, 4)))
```

```{r}
#| label: systemfonts-font-variants-compare-2
#| echo: false
#| fig-width: 5.5
#| fig-height: 6.5
g + 
  ggtitle("Yikes, that's exciting! 🤩") + 
  theme_minimal(base_family = "Asap SemiCondensed Semibold S1", base_size = 13) + 
  theme(plot.title = element_text(size = rel(2.2)), 
        plot.title.position = "plot",
        plot.margin = margin(rep(15, 4)))
```
:::


## Use Font Features

```{r}
#| label: systemfonts-register-tabular
#| cache: false
#| code-line-numbers: "1,2,3,4,5,6|5"
register_variant(
  name = "Spline Sans Tabular",
  family = "Spline Sans",
  weight = "normal",
  features = font_feature(numbers = "tabular")
)
```


## Use Font Features

::: {layout-ncol="2"}
```{r}
#| label: systemfonts-font-variants-compare-proportional
#| echo: false
#| cache: false
#| purl: false
#| fig-width: 5.5
#| fig-height: 6.5
label <- "1,509.67\n710.13\n498.30\n11.11\n8.57"

register_variant(
  name = "Spline Sans Proportional",
  family = "Spline Sans",
  weight = "normal",
  features = font_feature(numbers = "proportional")
)

ggplot() + 
  geom_text(
    aes(x = 0, y = 0, label = label), 
    family = "Spline Sans Proportional", hjust = 1, size = 22, lineheight = .9
  ) +
  scale_x_continuous(limits = c(-.5, .1)) +
  ggtitle("Proportional") +
  theme_void(base_size = 40) +
  theme(plot.title = element_text(family = "Spline Sans", hjust = .5, face = "bold"))
```

::: fragment

```{r}
#| label: systemfonts-font-variants-compare-tabular
#| echo: false
#| purl: false
#| fig-width: 5.5
#| fig-height: 6.5
ggplot() +
 geom_text( 
    aes(x = 0, y = 0, label = label),
    family = "Spline Sans Tabular", hjust = 1, size = 22, lineheight = .9
  ) +
  scale_x_continuous(limits = c(-.5, .1)) +
  ggtitle("Tabular") +
  theme_void(base_size = 40) +
  theme(plot.title = element_text(family = "Spline Sans", hjust = .5, face = "bold"))
```
:::
:::


## Like a Pro: Set Theme Globally

```{r}
#| label: theme-light-set-global
#| code-line-numbers: "1|3,4,5,6,7,8,9"
theme_set(theme_minimal(base_family = "Asap SemiCondensed", base_size = 13))

theme_update(
  panel.grid.minor = element_blank(),
  strip.text = element_text(face = "bold", size = rel(1.1)),
  plot.title = element_text(face = "bold", size = rel(1.3)),
  plot.title.position = "plot",
  plot.caption.position = "plot"
)
```


## Like a Pro: Set Theme Globally

```{r}
#| label: base-plot-gm-bubbles-after-themeset
#| output-location: column
g
```


## Complete Themes: What's Inside?

```{r}
#| label: code-theme-grey
theme_grey
```


## Complete Themes: What's Inside?

```{r}
#| label: code-theme-minimal
theme_minimal
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap
#| eval: false
#| code-line-numbers: "1,2,6|4,5"
theme_asap <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                       base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) 
}
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap-replace-blank
#| eval: false
#| code-line-numbers: "5|6,8|7"
theme_asap <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                       base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size)  %+replace%
    theme(
      # add your theme changes here
    )
}
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap-replace-filled
#| cache: false
theme_asap <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                       base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace%
    theme(
      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),
                                family = "Asap SemiCondensed Extrabold", hjust = 0),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size),
                                  size = rel(0.8), hjust = 1, vjust = 1),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, vjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, vjust = 0, angle = 90, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank(), 
      complete = TRUE
    )
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-asap-default
#| output-location: column
#| code-line-numbers: "2"
g + 
  theme_asap()
```


## Modify an Existing Theme

<br>
`⁠%+replace%`

> replaces the entire element; any element of a theme not specified in e2 will not be present in the resulting theme (i.e. NULL).<br>Thus this operator can be used to overwrite an entire theme.

::: fragment
<br>
`+`

> updates the elements of e1 that differ from elements specified (not NULL) in e2.<br>Thus this operator can be used to incrementally add or modify attributes of a ggplot theme.

:::


## Create a Custom Theme

```{r}
#| label: code-theme-asap-update
#| cache: false
#| code-line-numbers: "5|7,8,10,12,13"
theme_asap_plus <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme( 
      plot.title = element_text(size = rel(1.3), hjust = 0,
                                family = "Asap SemiCondensed Extrabold"),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank()
    )
}
```


## + versus %+replace%

```{r}
#| label: code-theme-asap-replace-non-complete
#| echo: false
#| cache: false
theme_asap_replace <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% 
    theme( 
      plot.title = element_text(size = rel(1.3), hjust = 0,
                                family = "Asap SemiCondensed Extrabold"),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank()
    )
}
```

::: {layout-ncol="2"}
```{r}
#| label: apply-theme-asap-plus
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_plus()
```

::: fragment
```{r}
#| label: apply-theme-asap-replace
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_replace()
```
:::
:::


## Modify the Custom Theme

```{r}
#| label: apply-theme-asap-modify-theme-elements
#| output-location: column
#| code-line-numbers: "3,4,5,6,7,8,9"
g + 
  theme_asap() +
  theme(
    legend.position = "top",
    plot.background = element_rect(
      fill = NA, color = NA
    )
  )
```


## Modify the Custom Theme

```{r}
#| label: apply-theme-asap-modify-base-settings
#| output-location: column
#| code-line-numbers: "3|4"
g + 
  theme_asap(
    base_size = 9,
    base_family = "Hepta Slab"
  )
```


## Modify the Custom Theme

```{r}
#| label: apply-theme-asap-modify-title-face
#| output-location: column
#| code-line-numbers: "6,7,8,9,10"
g + 
  theme_asap(
    base_size = 9,
    base_family = "Hepta Slab"
  ) +
  theme(
    plot.title = element_text(
      family = "Hepta Slab"
    )
  )
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap-title-family
#| eval: false
#| purl: false
#| code-line-numbers: "1,2|5,6,7,8,9|14,15"
theme_asap_title <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                             title_family = "Asap SemiCondensed Extrabold",
                             base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if (title_family == "Asap SemiCondensed Extrabold") {
    register_variant(name = "Asap SemiCondensed Extrabold",
                     family = "Asap SemiCondensed",
                     weight = "ultrabold")
  }
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family),
      # fill in other theme adjustments here
    )
}
```

```{r}
#| label: code-theme-asap-title-family-full
#| echo: false
#| cache: false
theme_asap_title <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                             title_family = "Asap SemiCondensed Extrabold",
                             base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if (title_family == "Asap SemiCondensed Extrabold") {
    register_variant(name = "Asap SemiCondensed Extrabold",
                     family = "Asap SemiCondensed",
                     weight = "ultrabold")
  }
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank()
    )
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-title-family
#| output-location: column
#| code-line-numbers: "5"
g +
  theme_asap_title(
    base_size = 9,
    base_family = "Hepta Slab",
    title_family = "Hepta Slab"
  )
```


## Advanced Font Handling (for Themes)

```{r}
#| label: code-theme-font-handling
#| cache: false
#| code-line-numbers: "1,2|4|6,7,8,9,10,11,12|13,14,15,16|18,19,20,21,22|25,26,27,28,29,30,31,32,33,34,35,36,37|26,27,28,29|30,31,32,33,34,35,36|39,42"
theme_fonts <- function(base_size = 12, base_line_size = base_size/22, 
                        base_rect_size = base_size/22) {
  
  unavailable <- vector("character")
  
  if (sum(grepl("Hepta Slab", systemfonts::system_fonts()$family)) > 0) {
    systemfonts::register_variant(
      name = "Hepta Slab Extrabold",
      family = "Hepta Slab",
      weight = "ultrabold"
    )
    title_family <- "Hepta Slab Extrabold"
  } else {
    title_family <- ""
    unavailable <- c(unavailable, "Hepta Slab")
  }
  
  if (sum(grepl("Spline Sans", systemfonts::system_fonts()$family)) > 0) {
    base_family <- "Spline Sans"
  } else {
    base_family <- ""
    unavailable <- c(unavailable, "Spline Sans")
  }
  
  if (length(unavailable) > 0) {
    unavailable <- data.frame(
      name = unavailable, 
      url = paste0("https://fonts.google.com/specimen/", sub(" ", "+", unavailable))
    )
    message(paste(
      "Using system default typefaces.", 
      "For proper use, please install the following typeface(s):",
      paste0("  - ", unavailable$name, ": ", unavailable$url, collapse = "\n"),
      "Then restart your R session.",
      sep = "\n"
    ))
  }
  
  theme_asap(base_size = base_size, base_family = base_family, 
             base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family)
    )
}
```


## Apply the Custom Theme

```{r}
#| label: theme-fonts-message
#| eval: false
#| purl: false
g + theme_fonts()
```

<code style='color:#663399;font-size:16pt;'>Using system default typefaces.<br>For proper use, please install the following typeface(s):<br>&emsp;- Hepta Slab: https://fonts.google.com/specimen/Hepta+Slab<br>&emsp;- Spline: https://fonts.google.com/specimen/Spline+Sans<br>Then restart your R session.</code>


## Apply the Custom Theme

```{r}
#| label: theme-fonts-show
#| output-location: column
g + theme_fonts()
```


## Add More Arguments

::: incremental
-   turn grid lines on and off
-   define alternative styles
-   set a tabular fonts for axis and legend text
-   adjust legend position
-   add/remove plot margin
-   control rendering of text elements
-   ...
:::

. . .

<b class='simple-highlight-grn' style='font-size:2.6rem;'>Pro: Users don't have to use `theme()`.</b>

. . .

<b class='simple-highlight-ylw' style='font-size:2.6rem;'>Con: Users don't have to use `theme()`.</b>


## Add More Arguments

-   ***turn grid lines on and off***
-   define alternative styles
-   set a tabular fonts for axis and legend text
-   adjust legend position
-   add/remove plot margin
-   control rendering of text elements
-   ...

<b class='simple-highlight-grn' style='font-size:2.6rem;'>Pro: Users don't have to use `theme()`.</b>
  
<b class='simple-highlight-ylw' style='font-size:2.6rem;'>Con: Users don't have to use `theme()`.</b>


## Add More Arguments

```{r}
#| label: code-theme-asap-grid
#| eval: false
#| purl: false
#| code-line-numbers: "1|3|7,8,9,10|13,14,15,16,17|18,19,20,21,22|24"
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt"),
      # fill in other theme adjustments here
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_size/6, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_size/4, "pt"))
  }
  
  return(out)
}
```

```{r}
#| label: code-theme-asap-grid-full
#| echo: false
#| cache: false
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),
                                family = "Asap SemiCondensed Extrabold", hjust = 0), 
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt")
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_line_size, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_line_size, "pt"))
  }
  
  return(out)
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-grid-y
#| output-location: column
#| code-line-numbers: "2,3,4"
g + 
  theme_asap_grid(
    grid = "y"
  )
```


## Apply the Custom Theme

::: {layout-ncol="2"}
```{r}
#| label: apply-theme-custom-grid-xy
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_grid()
```

```{r}
#| label: apply-theme-custom-grid-none
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_grid(grid = "none")
```
:::


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-grid-all
#| output-location: column
#| code-line-numbers: "3"
g + 
  theme_asap_grid(
    grid = "all"
  )
```


## Add Checks to the Custom Theme

```{r}
#| label: code-theme-asap-grid-check
#| eval: false
#| purl: false
#| code-line-numbers: "4"
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if(!stringr::str_detect(grid, "none|x|X|y|Y")) stop('grid must be a character: "none" or any combination of "X", "Y", "x" and "y".')
  
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt"),
      ## fill in other theme adjustments here
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_size/6, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_size/4, "pt"))
  }
  
  return(out)
}
```

```{r}
#| label: code-theme-asap-grid-check-full
#| echo: false
#| cache: false
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if(!stringr::str_detect(grid, "none|x|X|y|Y")) stop('grid must be a character: "none" or any combination of "X", "Y", "x" and "y".')
  
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),
                                family = "Asap SemiCondensed Extrabold", hjust = 0), 
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt")
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_line_size, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_line_size, "pt"))
  }
  
  return(out)
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-grid-all-check
#| eval: false
#| code-line-numbers: "3"
g + 
  theme_asap_grid(
    grid = "all"
  )
```

<code style='color:red;font-size:16pt;'>Error in theme_asap_grid(grid = "all") :<br>grid must be a character: "none" or any combination of "X", "Y", "x" and "y".</code>


## Your Turn

::: question
-   **Create a corporate or funny custom theme.**
    -   Make use of an existing complete theme to get started.
    -   Pick a non-default font (or multiple) for your theme.
    -   Optional: Try working with font variants.
    -   Optional: Add other helpful arguments to your `theme_*` function.
:::


## Your Turn

::: question
-   **Create a corporate or funny custom theme.**
    -   Make use of an existing complete theme to get started.
    -   Pick a non-default font (or multiple).
    -   Optional: Try working with font variants.
    -   Optional: Add other helpful arguments to your `theme_*` function.
-   **Showcase your theme using some example graphics.**
    -   Save them to disk and share them with the group.
    -   If you have added some additional arguments, feel free to share them as well.
:::

##  {background-image="img/exercise-what-now.png" background-position="center" background-size="75%"}
